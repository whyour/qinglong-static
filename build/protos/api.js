"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.17.3
// source: back/protos/api.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiClient = exports.ApiService = exports.CronDetailResponse = exports.CronDetailRequest = exports.CronResponse = exports.CronsResponse = exports.DeleteCronsRequest = exports.UpdateCronRequest = exports.CreateCronRequest = exports.CronItem = exports.ExtraScheduleItem = exports.SystemNotifyRequest = exports.Response = exports.EnvResponse = exports.EnvsResponse = exports.GetEnvByIdRequest = exports.UpdateEnvNamesRequest = exports.EnableEnvsRequest = exports.DisableEnvsRequest = exports.MoveEnvRequest = exports.DeleteEnvsRequest = exports.UpdateEnvRequest = exports.CreateEnvRequest = exports.GetEnvsRequest = exports.EnvItem = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const grpc_js_1 = require("@grpc/grpc-js");
exports.protobufPackage = "com.ql.api";
function createBaseEnvItem() {
    return {
        id: undefined,
        name: undefined,
        value: undefined,
        remarks: undefined,
        status: undefined,
        position: undefined,
    };
}
exports.EnvItem = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            writer.uint32(8).int32(message.id);
        }
        if (message.name !== undefined) {
            writer.uint32(18).string(message.name);
        }
        if (message.value !== undefined) {
            writer.uint32(26).string(message.value);
        }
        if (message.remarks !== undefined) {
            writer.uint32(34).string(message.remarks);
        }
        if (message.status !== undefined) {
            writer.uint32(40).int32(message.status);
        }
        if (message.position !== undefined) {
            writer.uint32(48).int64(message.position);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnvItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.remarks = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.position = longToNumber(reader.int64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            value: isSet(object.value) ? globalThis.String(object.value) : undefined,
            remarks: isSet(object.remarks) ? globalThis.String(object.remarks) : undefined,
            status: isSet(object.status) ? globalThis.Number(object.status) : undefined,
            position: isSet(object.position) ? globalThis.Number(object.position) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = Math.round(message.id);
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        if (message.remarks !== undefined) {
            obj.remarks = message.remarks;
        }
        if (message.status !== undefined) {
            obj.status = Math.round(message.status);
        }
        if (message.position !== undefined) {
            obj.position = Math.round(message.position);
        }
        return obj;
    },
    create(base) {
        return exports.EnvItem.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseEnvItem();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : undefined;
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : undefined;
        message.value = (_c = object.value) !== null && _c !== void 0 ? _c : undefined;
        message.remarks = (_d = object.remarks) !== null && _d !== void 0 ? _d : undefined;
        message.status = (_e = object.status) !== null && _e !== void 0 ? _e : undefined;
        message.position = (_f = object.position) !== null && _f !== void 0 ? _f : undefined;
        return message;
    },
};
function createBaseGetEnvsRequest() {
    return { searchValue: "" };
}
exports.GetEnvsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.searchValue !== "") {
            writer.uint32(10).string(message.searchValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetEnvsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.searchValue = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { searchValue: isSet(object.searchValue) ? globalThis.String(object.searchValue) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.searchValue !== "") {
            obj.searchValue = message.searchValue;
        }
        return obj;
    },
    create(base) {
        return exports.GetEnvsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetEnvsRequest();
        message.searchValue = (_a = object.searchValue) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseCreateEnvRequest() {
    return { envs: [] };
}
exports.CreateEnvRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.envs) {
            exports.EnvItem.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateEnvRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.envs.push(exports.EnvItem.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { envs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.envs) ? object.envs.map((e) => exports.EnvItem.fromJSON(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.envs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.envs = message.envs.map((e) => exports.EnvItem.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CreateEnvRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseCreateEnvRequest();
        message.envs = ((_a = object.envs) === null || _a === void 0 ? void 0 : _a.map((e) => exports.EnvItem.fromPartial(e))) || [];
        return message;
    },
};
function createBaseUpdateEnvRequest() {
    return { env: undefined };
}
exports.UpdateEnvRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.env !== undefined) {
            exports.EnvItem.encode(message.env, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEnvRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.env = exports.EnvItem.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { env: isSet(object.env) ? exports.EnvItem.fromJSON(object.env) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.env !== undefined) {
            obj.env = exports.EnvItem.toJSON(message.env);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateEnvRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateEnvRequest();
        message.env = (object.env !== undefined && object.env !== null) ? exports.EnvItem.fromPartial(object.env) : undefined;
        return message;
    },
};
function createBaseDeleteEnvsRequest() {
    return { ids: [] };
}
exports.DeleteEnvsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.ids) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteEnvsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.ids.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.ids.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.ids) ? object.ids.map((e) => globalThis.Number(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.ids = message.ids.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.DeleteEnvsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDeleteEnvsRequest();
        message.ids = ((_a = object.ids) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseMoveEnvRequest() {
    return { id: 0, fromIndex: 0, toIndex: 0 };
}
exports.MoveEnvRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.fromIndex !== 0) {
            writer.uint32(16).int32(message.fromIndex);
        }
        if (message.toIndex !== 0) {
            writer.uint32(24).int32(message.toIndex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMoveEnvRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.fromIndex = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.toIndex = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            fromIndex: isSet(object.fromIndex) ? globalThis.Number(object.fromIndex) : 0,
            toIndex: isSet(object.toIndex) ? globalThis.Number(object.toIndex) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.fromIndex !== 0) {
            obj.fromIndex = Math.round(message.fromIndex);
        }
        if (message.toIndex !== 0) {
            obj.toIndex = Math.round(message.toIndex);
        }
        return obj;
    },
    create(base) {
        return exports.MoveEnvRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMoveEnvRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : 0;
        message.fromIndex = (_b = object.fromIndex) !== null && _b !== void 0 ? _b : 0;
        message.toIndex = (_c = object.toIndex) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseDisableEnvsRequest() {
    return { ids: [] };
}
exports.DisableEnvsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.ids) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDisableEnvsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.ids.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.ids.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.ids) ? object.ids.map((e) => globalThis.Number(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.ids = message.ids.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.DisableEnvsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDisableEnvsRequest();
        message.ids = ((_a = object.ids) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseEnableEnvsRequest() {
    return { ids: [] };
}
exports.EnableEnvsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.ids) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnableEnvsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.ids.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.ids.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.ids) ? object.ids.map((e) => globalThis.Number(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.ids = message.ids.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.EnableEnvsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEnableEnvsRequest();
        message.ids = ((_a = object.ids) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseUpdateEnvNamesRequest() {
    return { ids: [], name: "" };
}
exports.UpdateEnvNamesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.ids) {
            writer.int32(v);
        }
        writer.join();
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEnvNamesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.ids.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.ids.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.ids) ? object.ids.map((e) => globalThis.Number(e)) : [],
            name: isSet(object.name) ? globalThis.String(object.name) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.ids = message.ids.map((e) => Math.round(e));
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateEnvNamesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUpdateEnvNamesRequest();
        message.ids = ((_a = object.ids) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetEnvByIdRequest() {
    return { id: 0 };
}
exports.GetEnvByIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetEnvByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.GetEnvByIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetEnvByIdRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseEnvsResponse() {
    return { code: 0, data: [], message: undefined };
}
exports.EnvsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.code !== 0) {
            writer.uint32(8).int32(message.code);
        }
        for (const v of message.data) {
            exports.EnvItem.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.message !== undefined) {
            writer.uint32(26).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnvsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.code = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.data.push(exports.EnvItem.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? globalThis.Number(object.code) : 0,
            data: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.data) ? object.data.map((e) => exports.EnvItem.fromJSON(e)) : [],
            message: isSet(object.message) ? globalThis.String(object.message) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.code !== 0) {
            obj.code = Math.round(message.code);
        }
        if ((_a = message.data) === null || _a === void 0 ? void 0 : _a.length) {
            obj.data = message.data.map((e) => exports.EnvItem.toJSON(e));
        }
        if (message.message !== undefined) {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.EnvsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseEnvsResponse();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : 0;
        message.data = ((_b = object.data) === null || _b === void 0 ? void 0 : _b.map((e) => exports.EnvItem.fromPartial(e))) || [];
        message.message = (_c = object.message) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
function createBaseEnvResponse() {
    return { code: 0, data: undefined, message: undefined };
}
exports.EnvResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.code !== 0) {
            writer.uint32(8).int32(message.code);
        }
        if (message.data !== undefined) {
            exports.EnvItem.encode(message.data, writer.uint32(18).fork()).join();
        }
        if (message.message !== undefined) {
            writer.uint32(26).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnvResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.code = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.data = exports.EnvItem.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? globalThis.Number(object.code) : 0,
            data: isSet(object.data) ? exports.EnvItem.fromJSON(object.data) : undefined,
            message: isSet(object.message) ? globalThis.String(object.message) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== 0) {
            obj.code = Math.round(message.code);
        }
        if (message.data !== undefined) {
            obj.data = exports.EnvItem.toJSON(message.data);
        }
        if (message.message !== undefined) {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.EnvResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEnvResponse();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : 0;
        message.data = (object.data !== undefined && object.data !== null) ? exports.EnvItem.fromPartial(object.data) : undefined;
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBaseResponse() {
    return { code: 0, message: undefined };
}
exports.Response = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.code !== 0) {
            writer.uint32(8).int32(message.code);
        }
        if (message.message !== undefined) {
            writer.uint32(18).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.code = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? globalThis.Number(object.code) : 0,
            message: isSet(object.message) ? globalThis.String(object.message) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== 0) {
            obj.code = Math.round(message.code);
        }
        if (message.message !== undefined) {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.Response.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseResponse();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : 0;
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBaseSystemNotifyRequest() {
    return { title: "", content: "" };
}
exports.SystemNotifyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.content !== "") {
            writer.uint32(18).string(message.content);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSystemNotifyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            content: isSet(object.content) ? globalThis.String(object.content) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        return obj;
    },
    create(base) {
        return exports.SystemNotifyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSystemNotifyRequest();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.content = (_b = object.content) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseExtraScheduleItem() {
    return { schedule: "" };
}
exports.ExtraScheduleItem = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.schedule !== "") {
            writer.uint32(10).string(message.schedule);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExtraScheduleItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.schedule = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { schedule: isSet(object.schedule) ? globalThis.String(object.schedule) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.schedule !== "") {
            obj.schedule = message.schedule;
        }
        return obj;
    },
    create(base) {
        return exports.ExtraScheduleItem.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseExtraScheduleItem();
        message.schedule = (_a = object.schedule) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseCronItem() {
    return {
        id: undefined,
        command: undefined,
        schedule: undefined,
        name: undefined,
        labels: [],
        sub_id: undefined,
        extra_schedules: [],
        task_before: undefined,
        task_after: undefined,
        status: undefined,
        log_path: undefined,
        pid: undefined,
        last_running_time: undefined,
        last_execution_time: undefined,
    };
}
exports.CronItem = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            writer.uint32(8).int32(message.id);
        }
        if (message.command !== undefined) {
            writer.uint32(18).string(message.command);
        }
        if (message.schedule !== undefined) {
            writer.uint32(26).string(message.schedule);
        }
        if (message.name !== undefined) {
            writer.uint32(34).string(message.name);
        }
        for (const v of message.labels) {
            writer.uint32(42).string(v);
        }
        if (message.sub_id !== undefined) {
            writer.uint32(48).int32(message.sub_id);
        }
        for (const v of message.extra_schedules) {
            exports.ExtraScheduleItem.encode(v, writer.uint32(58).fork()).join();
        }
        if (message.task_before !== undefined) {
            writer.uint32(66).string(message.task_before);
        }
        if (message.task_after !== undefined) {
            writer.uint32(74).string(message.task_after);
        }
        if (message.status !== undefined) {
            writer.uint32(80).int32(message.status);
        }
        if (message.log_path !== undefined) {
            writer.uint32(90).string(message.log_path);
        }
        if (message.pid !== undefined) {
            writer.uint32(96).int32(message.pid);
        }
        if (message.last_running_time !== undefined) {
            writer.uint32(104).int64(message.last_running_time);
        }
        if (message.last_execution_time !== undefined) {
            writer.uint32(112).int64(message.last_execution_time);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCronItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.command = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.schedule = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.labels.push(reader.string());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.sub_id = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.extra_schedules.push(exports.ExtraScheduleItem.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.task_before = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.task_after = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.log_path = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.pid = reader.int32();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.last_running_time = longToNumber(reader.int64());
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.last_execution_time = longToNumber(reader.int64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
            command: isSet(object.command) ? globalThis.String(object.command) : undefined,
            schedule: isSet(object.schedule) ? globalThis.String(object.schedule) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            labels: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.labels) ? object.labels.map((e) => globalThis.String(e)) : [],
            sub_id: isSet(object.sub_id) ? globalThis.Number(object.sub_id) : undefined,
            extra_schedules: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.extra_schedules)
                ? object.extra_schedules.map((e) => exports.ExtraScheduleItem.fromJSON(e))
                : [],
            task_before: isSet(object.task_before) ? globalThis.String(object.task_before) : undefined,
            task_after: isSet(object.task_after) ? globalThis.String(object.task_after) : undefined,
            status: isSet(object.status) ? globalThis.Number(object.status) : undefined,
            log_path: isSet(object.log_path) ? globalThis.String(object.log_path) : undefined,
            pid: isSet(object.pid) ? globalThis.Number(object.pid) : undefined,
            last_running_time: isSet(object.last_running_time) ? globalThis.Number(object.last_running_time) : undefined,
            last_execution_time: isSet(object.last_execution_time)
                ? globalThis.Number(object.last_execution_time)
                : undefined,
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.id !== undefined) {
            obj.id = Math.round(message.id);
        }
        if (message.command !== undefined) {
            obj.command = message.command;
        }
        if (message.schedule !== undefined) {
            obj.schedule = message.schedule;
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if ((_a = message.labels) === null || _a === void 0 ? void 0 : _a.length) {
            obj.labels = message.labels;
        }
        if (message.sub_id !== undefined) {
            obj.sub_id = Math.round(message.sub_id);
        }
        if ((_b = message.extra_schedules) === null || _b === void 0 ? void 0 : _b.length) {
            obj.extra_schedules = message.extra_schedules.map((e) => exports.ExtraScheduleItem.toJSON(e));
        }
        if (message.task_before !== undefined) {
            obj.task_before = message.task_before;
        }
        if (message.task_after !== undefined) {
            obj.task_after = message.task_after;
        }
        if (message.status !== undefined) {
            obj.status = Math.round(message.status);
        }
        if (message.log_path !== undefined) {
            obj.log_path = message.log_path;
        }
        if (message.pid !== undefined) {
            obj.pid = Math.round(message.pid);
        }
        if (message.last_running_time !== undefined) {
            obj.last_running_time = Math.round(message.last_running_time);
        }
        if (message.last_execution_time !== undefined) {
            obj.last_execution_time = Math.round(message.last_execution_time);
        }
        return obj;
    },
    create(base) {
        return exports.CronItem.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        const message = createBaseCronItem();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : undefined;
        message.command = (_b = object.command) !== null && _b !== void 0 ? _b : undefined;
        message.schedule = (_c = object.schedule) !== null && _c !== void 0 ? _c : undefined;
        message.name = (_d = object.name) !== null && _d !== void 0 ? _d : undefined;
        message.labels = ((_e = object.labels) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.sub_id = (_f = object.sub_id) !== null && _f !== void 0 ? _f : undefined;
        message.extra_schedules = ((_g = object.extra_schedules) === null || _g === void 0 ? void 0 : _g.map((e) => exports.ExtraScheduleItem.fromPartial(e))) || [];
        message.task_before = (_h = object.task_before) !== null && _h !== void 0 ? _h : undefined;
        message.task_after = (_j = object.task_after) !== null && _j !== void 0 ? _j : undefined;
        message.status = (_k = object.status) !== null && _k !== void 0 ? _k : undefined;
        message.log_path = (_l = object.log_path) !== null && _l !== void 0 ? _l : undefined;
        message.pid = (_m = object.pid) !== null && _m !== void 0 ? _m : undefined;
        message.last_running_time = (_o = object.last_running_time) !== null && _o !== void 0 ? _o : undefined;
        message.last_execution_time = (_p = object.last_execution_time) !== null && _p !== void 0 ? _p : undefined;
        return message;
    },
};
function createBaseCreateCronRequest() {
    return {
        command: "",
        schedule: "",
        name: undefined,
        labels: [],
        sub_id: undefined,
        extra_schedules: [],
        task_before: undefined,
        task_after: undefined,
    };
}
exports.CreateCronRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.command !== "") {
            writer.uint32(10).string(message.command);
        }
        if (message.schedule !== "") {
            writer.uint32(18).string(message.schedule);
        }
        if (message.name !== undefined) {
            writer.uint32(26).string(message.name);
        }
        for (const v of message.labels) {
            writer.uint32(34).string(v);
        }
        if (message.sub_id !== undefined) {
            writer.uint32(40).int32(message.sub_id);
        }
        for (const v of message.extra_schedules) {
            exports.ExtraScheduleItem.encode(v, writer.uint32(50).fork()).join();
        }
        if (message.task_before !== undefined) {
            writer.uint32(58).string(message.task_before);
        }
        if (message.task_after !== undefined) {
            writer.uint32(66).string(message.task_after);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateCronRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.command = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.schedule = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.labels.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.sub_id = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.extra_schedules.push(exports.ExtraScheduleItem.decode(reader, reader.uint32()));
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.task_before = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.task_after = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            command: isSet(object.command) ? globalThis.String(object.command) : "",
            schedule: isSet(object.schedule) ? globalThis.String(object.schedule) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            labels: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.labels) ? object.labels.map((e) => globalThis.String(e)) : [],
            sub_id: isSet(object.sub_id) ? globalThis.Number(object.sub_id) : undefined,
            extra_schedules: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.extra_schedules)
                ? object.extra_schedules.map((e) => exports.ExtraScheduleItem.fromJSON(e))
                : [],
            task_before: isSet(object.task_before) ? globalThis.String(object.task_before) : undefined,
            task_after: isSet(object.task_after) ? globalThis.String(object.task_after) : undefined,
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.command !== "") {
            obj.command = message.command;
        }
        if (message.schedule !== "") {
            obj.schedule = message.schedule;
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if ((_a = message.labels) === null || _a === void 0 ? void 0 : _a.length) {
            obj.labels = message.labels;
        }
        if (message.sub_id !== undefined) {
            obj.sub_id = Math.round(message.sub_id);
        }
        if ((_b = message.extra_schedules) === null || _b === void 0 ? void 0 : _b.length) {
            obj.extra_schedules = message.extra_schedules.map((e) => exports.ExtraScheduleItem.toJSON(e));
        }
        if (message.task_before !== undefined) {
            obj.task_before = message.task_before;
        }
        if (message.task_after !== undefined) {
            obj.task_after = message.task_after;
        }
        return obj;
    },
    create(base) {
        return exports.CreateCronRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseCreateCronRequest();
        message.command = (_a = object.command) !== null && _a !== void 0 ? _a : "";
        message.schedule = (_b = object.schedule) !== null && _b !== void 0 ? _b : "";
        message.name = (_c = object.name) !== null && _c !== void 0 ? _c : undefined;
        message.labels = ((_d = object.labels) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.sub_id = (_e = object.sub_id) !== null && _e !== void 0 ? _e : undefined;
        message.extra_schedules = ((_f = object.extra_schedules) === null || _f === void 0 ? void 0 : _f.map((e) => exports.ExtraScheduleItem.fromPartial(e))) || [];
        message.task_before = (_g = object.task_before) !== null && _g !== void 0 ? _g : undefined;
        message.task_after = (_h = object.task_after) !== null && _h !== void 0 ? _h : undefined;
        return message;
    },
};
function createBaseUpdateCronRequest() {
    return {
        id: 0,
        command: undefined,
        schedule: undefined,
        name: undefined,
        labels: [],
        sub_id: undefined,
        extra_schedules: [],
        task_before: undefined,
        task_after: undefined,
    };
}
exports.UpdateCronRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.command !== undefined) {
            writer.uint32(18).string(message.command);
        }
        if (message.schedule !== undefined) {
            writer.uint32(26).string(message.schedule);
        }
        if (message.name !== undefined) {
            writer.uint32(34).string(message.name);
        }
        for (const v of message.labels) {
            writer.uint32(42).string(v);
        }
        if (message.sub_id !== undefined) {
            writer.uint32(48).int32(message.sub_id);
        }
        for (const v of message.extra_schedules) {
            exports.ExtraScheduleItem.encode(v, writer.uint32(58).fork()).join();
        }
        if (message.task_before !== undefined) {
            writer.uint32(66).string(message.task_before);
        }
        if (message.task_after !== undefined) {
            writer.uint32(74).string(message.task_after);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateCronRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.command = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.schedule = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.labels.push(reader.string());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.sub_id = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.extra_schedules.push(exports.ExtraScheduleItem.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.task_before = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.task_after = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            command: isSet(object.command) ? globalThis.String(object.command) : undefined,
            schedule: isSet(object.schedule) ? globalThis.String(object.schedule) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            labels: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.labels) ? object.labels.map((e) => globalThis.String(e)) : [],
            sub_id: isSet(object.sub_id) ? globalThis.Number(object.sub_id) : undefined,
            extra_schedules: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.extra_schedules)
                ? object.extra_schedules.map((e) => exports.ExtraScheduleItem.fromJSON(e))
                : [],
            task_before: isSet(object.task_before) ? globalThis.String(object.task_before) : undefined,
            task_after: isSet(object.task_after) ? globalThis.String(object.task_after) : undefined,
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.command !== undefined) {
            obj.command = message.command;
        }
        if (message.schedule !== undefined) {
            obj.schedule = message.schedule;
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if ((_a = message.labels) === null || _a === void 0 ? void 0 : _a.length) {
            obj.labels = message.labels;
        }
        if (message.sub_id !== undefined) {
            obj.sub_id = Math.round(message.sub_id);
        }
        if ((_b = message.extra_schedules) === null || _b === void 0 ? void 0 : _b.length) {
            obj.extra_schedules = message.extra_schedules.map((e) => exports.ExtraScheduleItem.toJSON(e));
        }
        if (message.task_before !== undefined) {
            obj.task_before = message.task_before;
        }
        if (message.task_after !== undefined) {
            obj.task_after = message.task_after;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateCronRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseUpdateCronRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : 0;
        message.command = (_b = object.command) !== null && _b !== void 0 ? _b : undefined;
        message.schedule = (_c = object.schedule) !== null && _c !== void 0 ? _c : undefined;
        message.name = (_d = object.name) !== null && _d !== void 0 ? _d : undefined;
        message.labels = ((_e = object.labels) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.sub_id = (_f = object.sub_id) !== null && _f !== void 0 ? _f : undefined;
        message.extra_schedules = ((_g = object.extra_schedules) === null || _g === void 0 ? void 0 : _g.map((e) => exports.ExtraScheduleItem.fromPartial(e))) || [];
        message.task_before = (_h = object.task_before) !== null && _h !== void 0 ? _h : undefined;
        message.task_after = (_j = object.task_after) !== null && _j !== void 0 ? _j : undefined;
        return message;
    },
};
function createBaseDeleteCronsRequest() {
    return { ids: [] };
}
exports.DeleteCronsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.ids) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteCronsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.ids.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.ids.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.ids) ? object.ids.map((e) => globalThis.Number(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.ids = message.ids.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.DeleteCronsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDeleteCronsRequest();
        message.ids = ((_a = object.ids) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseCronsResponse() {
    return { code: 0, data: [], message: undefined };
}
exports.CronsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.code !== 0) {
            writer.uint32(8).int32(message.code);
        }
        for (const v of message.data) {
            exports.CronItem.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.message !== undefined) {
            writer.uint32(26).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCronsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.code = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.data.push(exports.CronItem.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? globalThis.Number(object.code) : 0,
            data: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.data) ? object.data.map((e) => exports.CronItem.fromJSON(e)) : [],
            message: isSet(object.message) ? globalThis.String(object.message) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.code !== 0) {
            obj.code = Math.round(message.code);
        }
        if ((_a = message.data) === null || _a === void 0 ? void 0 : _a.length) {
            obj.data = message.data.map((e) => exports.CronItem.toJSON(e));
        }
        if (message.message !== undefined) {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.CronsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseCronsResponse();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : 0;
        message.data = ((_b = object.data) === null || _b === void 0 ? void 0 : _b.map((e) => exports.CronItem.fromPartial(e))) || [];
        message.message = (_c = object.message) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
function createBaseCronResponse() {
    return { code: 0, data: undefined, message: undefined };
}
exports.CronResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.code !== 0) {
            writer.uint32(8).int32(message.code);
        }
        if (message.data !== undefined) {
            exports.CronItem.encode(message.data, writer.uint32(18).fork()).join();
        }
        if (message.message !== undefined) {
            writer.uint32(26).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCronResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.code = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.data = exports.CronItem.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? globalThis.Number(object.code) : 0,
            data: isSet(object.data) ? exports.CronItem.fromJSON(object.data) : undefined,
            message: isSet(object.message) ? globalThis.String(object.message) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== 0) {
            obj.code = Math.round(message.code);
        }
        if (message.data !== undefined) {
            obj.data = exports.CronItem.toJSON(message.data);
        }
        if (message.message !== undefined) {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.CronResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCronResponse();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : 0;
        message.data = (object.data !== undefined && object.data !== null) ? exports.CronItem.fromPartial(object.data) : undefined;
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBaseCronDetailRequest() {
    return { log_path: "" };
}
exports.CronDetailRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.log_path !== "") {
            writer.uint32(10).string(message.log_path);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCronDetailRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.log_path = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { log_path: isSet(object.log_path) ? globalThis.String(object.log_path) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.log_path !== "") {
            obj.log_path = message.log_path;
        }
        return obj;
    },
    create(base) {
        return exports.CronDetailRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseCronDetailRequest();
        message.log_path = (_a = object.log_path) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseCronDetailResponse() {
    return { code: 0, data: undefined, message: undefined };
}
exports.CronDetailResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.code !== 0) {
            writer.uint32(8).int32(message.code);
        }
        if (message.data !== undefined) {
            exports.CronItem.encode(message.data, writer.uint32(18).fork()).join();
        }
        if (message.message !== undefined) {
            writer.uint32(26).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCronDetailResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.code = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.data = exports.CronItem.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? globalThis.Number(object.code) : 0,
            data: isSet(object.data) ? exports.CronItem.fromJSON(object.data) : undefined,
            message: isSet(object.message) ? globalThis.String(object.message) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== 0) {
            obj.code = Math.round(message.code);
        }
        if (message.data !== undefined) {
            obj.data = exports.CronItem.toJSON(message.data);
        }
        if (message.message !== undefined) {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.CronDetailResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCronDetailResponse();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : 0;
        message.data = (object.data !== undefined && object.data !== null) ? exports.CronItem.fromPartial(object.data) : undefined;
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
exports.ApiService = {
    getEnvs: {
        path: "/com.ql.api.Api/GetEnvs",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.GetEnvsRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.GetEnvsRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.EnvsResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.EnvsResponse.decode(value),
    },
    createEnv: {
        path: "/com.ql.api.Api/CreateEnv",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.CreateEnvRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.CreateEnvRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.EnvsResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.EnvsResponse.decode(value),
    },
    updateEnv: {
        path: "/com.ql.api.Api/UpdateEnv",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.UpdateEnvRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.UpdateEnvRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.EnvResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.EnvResponse.decode(value),
    },
    deleteEnvs: {
        path: "/com.ql.api.Api/DeleteEnvs",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.DeleteEnvsRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.DeleteEnvsRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.Response.encode(value).finish()),
        responseDeserialize: (value) => exports.Response.decode(value),
    },
    moveEnv: {
        path: "/com.ql.api.Api/MoveEnv",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.MoveEnvRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.MoveEnvRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.EnvResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.EnvResponse.decode(value),
    },
    disableEnvs: {
        path: "/com.ql.api.Api/DisableEnvs",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.DisableEnvsRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.DisableEnvsRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.Response.encode(value).finish()),
        responseDeserialize: (value) => exports.Response.decode(value),
    },
    enableEnvs: {
        path: "/com.ql.api.Api/EnableEnvs",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.EnableEnvsRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.EnableEnvsRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.Response.encode(value).finish()),
        responseDeserialize: (value) => exports.Response.decode(value),
    },
    updateEnvNames: {
        path: "/com.ql.api.Api/UpdateEnvNames",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.UpdateEnvNamesRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.UpdateEnvNamesRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.Response.encode(value).finish()),
        responseDeserialize: (value) => exports.Response.decode(value),
    },
    getEnvById: {
        path: "/com.ql.api.Api/GetEnvById",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.GetEnvByIdRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.GetEnvByIdRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.EnvResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.EnvResponse.decode(value),
    },
    systemNotify: {
        path: "/com.ql.api.Api/SystemNotify",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.SystemNotifyRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.SystemNotifyRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.Response.encode(value).finish()),
        responseDeserialize: (value) => exports.Response.decode(value),
    },
    getCronDetail: {
        path: "/com.ql.api.Api/GetCronDetail",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.CronDetailRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.CronDetailRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.CronDetailResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.CronDetailResponse.decode(value),
    },
    createCron: {
        path: "/com.ql.api.Api/CreateCron",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.CreateCronRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.CreateCronRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.CronResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.CronResponse.decode(value),
    },
    updateCron: {
        path: "/com.ql.api.Api/UpdateCron",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.UpdateCronRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.UpdateCronRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.CronResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.CronResponse.decode(value),
    },
    deleteCrons: {
        path: "/com.ql.api.Api/DeleteCrons",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.DeleteCronsRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.DeleteCronsRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.Response.encode(value).finish()),
        responseDeserialize: (value) => exports.Response.decode(value),
    },
};
exports.ApiClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.ApiService, "com.ql.api.Api");
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=api.js.map