"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.17.3
// source: back/protos/api.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiClient = exports.ApiService = exports.SystemNotifyRequest = exports.NotificationInfo = exports.CronDetailResponse = exports.CronDetailRequest = exports.CronResponse = exports.CronsResponse = exports.DeleteCronsRequest = exports.UpdateCronRequest = exports.CreateCronRequest = exports.CronItem = exports.ExtraScheduleItem = exports.Response = exports.EnvResponse = exports.EnvsResponse = exports.GetEnvByIdRequest = exports.UpdateEnvNamesRequest = exports.EnableEnvsRequest = exports.DisableEnvsRequest = exports.MoveEnvRequest = exports.DeleteEnvsRequest = exports.UpdateEnvRequest = exports.CreateEnvRequest = exports.GetEnvsRequest = exports.EnvItem = exports.notificationModeToJSON = exports.notificationModeFromJSON = exports.NotificationMode = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const grpc_js_1 = require("@grpc/grpc-js");
exports.protobufPackage = "com.ql.api";
var NotificationMode;
(function (NotificationMode) {
    NotificationMode[NotificationMode["gotify"] = 0] = "gotify";
    NotificationMode[NotificationMode["goCqHttpBot"] = 1] = "goCqHttpBot";
    NotificationMode[NotificationMode["serverChan"] = 2] = "serverChan";
    NotificationMode[NotificationMode["pushDeer"] = 3] = "pushDeer";
    NotificationMode[NotificationMode["bark"] = 4] = "bark";
    NotificationMode[NotificationMode["chat"] = 5] = "chat";
    NotificationMode[NotificationMode["telegramBot"] = 6] = "telegramBot";
    NotificationMode[NotificationMode["dingtalkBot"] = 7] = "dingtalkBot";
    NotificationMode[NotificationMode["weWorkBot"] = 8] = "weWorkBot";
    NotificationMode[NotificationMode["weWorkApp"] = 9] = "weWorkApp";
    NotificationMode[NotificationMode["aibotk"] = 10] = "aibotk";
    NotificationMode[NotificationMode["iGot"] = 11] = "iGot";
    NotificationMode[NotificationMode["pushPlus"] = 12] = "pushPlus";
    NotificationMode[NotificationMode["wePlusBot"] = 13] = "wePlusBot";
    NotificationMode[NotificationMode["email"] = 14] = "email";
    NotificationMode[NotificationMode["pushMe"] = 15] = "pushMe";
    NotificationMode[NotificationMode["feishu"] = 16] = "feishu";
    NotificationMode[NotificationMode["webhook"] = 17] = "webhook";
    NotificationMode[NotificationMode["chronocat"] = 18] = "chronocat";
    NotificationMode[NotificationMode["ntfy"] = 19] = "ntfy";
    NotificationMode[NotificationMode["wxPusherBot"] = 20] = "wxPusherBot";
    NotificationMode[NotificationMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(NotificationMode || (exports.NotificationMode = NotificationMode = {}));
function notificationModeFromJSON(object) {
    switch (object) {
        case 0:
        case "gotify":
            return NotificationMode.gotify;
        case 1:
        case "goCqHttpBot":
            return NotificationMode.goCqHttpBot;
        case 2:
        case "serverChan":
            return NotificationMode.serverChan;
        case 3:
        case "pushDeer":
            return NotificationMode.pushDeer;
        case 4:
        case "bark":
            return NotificationMode.bark;
        case 5:
        case "chat":
            return NotificationMode.chat;
        case 6:
        case "telegramBot":
            return NotificationMode.telegramBot;
        case 7:
        case "dingtalkBot":
            return NotificationMode.dingtalkBot;
        case 8:
        case "weWorkBot":
            return NotificationMode.weWorkBot;
        case 9:
        case "weWorkApp":
            return NotificationMode.weWorkApp;
        case 10:
        case "aibotk":
            return NotificationMode.aibotk;
        case 11:
        case "iGot":
            return NotificationMode.iGot;
        case 12:
        case "pushPlus":
            return NotificationMode.pushPlus;
        case 13:
        case "wePlusBot":
            return NotificationMode.wePlusBot;
        case 14:
        case "email":
            return NotificationMode.email;
        case 15:
        case "pushMe":
            return NotificationMode.pushMe;
        case 16:
        case "feishu":
            return NotificationMode.feishu;
        case 17:
        case "webhook":
            return NotificationMode.webhook;
        case 18:
        case "chronocat":
            return NotificationMode.chronocat;
        case 19:
        case "ntfy":
            return NotificationMode.ntfy;
        case 20:
        case "wxPusherBot":
            return NotificationMode.wxPusherBot;
        case -1:
        case "UNRECOGNIZED":
        default:
            return NotificationMode.UNRECOGNIZED;
    }
}
exports.notificationModeFromJSON = notificationModeFromJSON;
function notificationModeToJSON(object) {
    switch (object) {
        case NotificationMode.gotify:
            return "gotify";
        case NotificationMode.goCqHttpBot:
            return "goCqHttpBot";
        case NotificationMode.serverChan:
            return "serverChan";
        case NotificationMode.pushDeer:
            return "pushDeer";
        case NotificationMode.bark:
            return "bark";
        case NotificationMode.chat:
            return "chat";
        case NotificationMode.telegramBot:
            return "telegramBot";
        case NotificationMode.dingtalkBot:
            return "dingtalkBot";
        case NotificationMode.weWorkBot:
            return "weWorkBot";
        case NotificationMode.weWorkApp:
            return "weWorkApp";
        case NotificationMode.aibotk:
            return "aibotk";
        case NotificationMode.iGot:
            return "iGot";
        case NotificationMode.pushPlus:
            return "pushPlus";
        case NotificationMode.wePlusBot:
            return "wePlusBot";
        case NotificationMode.email:
            return "email";
        case NotificationMode.pushMe:
            return "pushMe";
        case NotificationMode.feishu:
            return "feishu";
        case NotificationMode.webhook:
            return "webhook";
        case NotificationMode.chronocat:
            return "chronocat";
        case NotificationMode.ntfy:
            return "ntfy";
        case NotificationMode.wxPusherBot:
            return "wxPusherBot";
        case NotificationMode.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.notificationModeToJSON = notificationModeToJSON;
function createBaseEnvItem() {
    return {
        id: undefined,
        name: undefined,
        value: undefined,
        remarks: undefined,
        status: undefined,
        position: undefined,
    };
}
exports.EnvItem = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            writer.uint32(8).int32(message.id);
        }
        if (message.name !== undefined) {
            writer.uint32(18).string(message.name);
        }
        if (message.value !== undefined) {
            writer.uint32(26).string(message.value);
        }
        if (message.remarks !== undefined) {
            writer.uint32(34).string(message.remarks);
        }
        if (message.status !== undefined) {
            writer.uint32(40).int32(message.status);
        }
        if (message.position !== undefined) {
            writer.uint32(48).int64(message.position);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnvItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.remarks = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.position = longToNumber(reader.int64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            value: isSet(object.value) ? globalThis.String(object.value) : undefined,
            remarks: isSet(object.remarks) ? globalThis.String(object.remarks) : undefined,
            status: isSet(object.status) ? globalThis.Number(object.status) : undefined,
            position: isSet(object.position) ? globalThis.Number(object.position) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = Math.round(message.id);
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        if (message.remarks !== undefined) {
            obj.remarks = message.remarks;
        }
        if (message.status !== undefined) {
            obj.status = Math.round(message.status);
        }
        if (message.position !== undefined) {
            obj.position = Math.round(message.position);
        }
        return obj;
    },
    create(base) {
        return exports.EnvItem.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseEnvItem();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : undefined;
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : undefined;
        message.value = (_c = object.value) !== null && _c !== void 0 ? _c : undefined;
        message.remarks = (_d = object.remarks) !== null && _d !== void 0 ? _d : undefined;
        message.status = (_e = object.status) !== null && _e !== void 0 ? _e : undefined;
        message.position = (_f = object.position) !== null && _f !== void 0 ? _f : undefined;
        return message;
    },
};
function createBaseGetEnvsRequest() {
    return { searchValue: "" };
}
exports.GetEnvsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.searchValue !== "") {
            writer.uint32(10).string(message.searchValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetEnvsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.searchValue = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { searchValue: isSet(object.searchValue) ? globalThis.String(object.searchValue) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.searchValue !== "") {
            obj.searchValue = message.searchValue;
        }
        return obj;
    },
    create(base) {
        return exports.GetEnvsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetEnvsRequest();
        message.searchValue = (_a = object.searchValue) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseCreateEnvRequest() {
    return { envs: [] };
}
exports.CreateEnvRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.envs) {
            exports.EnvItem.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateEnvRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.envs.push(exports.EnvItem.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { envs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.envs) ? object.envs.map((e) => exports.EnvItem.fromJSON(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.envs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.envs = message.envs.map((e) => exports.EnvItem.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CreateEnvRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseCreateEnvRequest();
        message.envs = ((_a = object.envs) === null || _a === void 0 ? void 0 : _a.map((e) => exports.EnvItem.fromPartial(e))) || [];
        return message;
    },
};
function createBaseUpdateEnvRequest() {
    return { env: undefined };
}
exports.UpdateEnvRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.env !== undefined) {
            exports.EnvItem.encode(message.env, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEnvRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.env = exports.EnvItem.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { env: isSet(object.env) ? exports.EnvItem.fromJSON(object.env) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.env !== undefined) {
            obj.env = exports.EnvItem.toJSON(message.env);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateEnvRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateEnvRequest();
        message.env = (object.env !== undefined && object.env !== null) ? exports.EnvItem.fromPartial(object.env) : undefined;
        return message;
    },
};
function createBaseDeleteEnvsRequest() {
    return { ids: [] };
}
exports.DeleteEnvsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.ids) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteEnvsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.ids.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.ids.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.ids) ? object.ids.map((e) => globalThis.Number(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.ids = message.ids.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.DeleteEnvsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDeleteEnvsRequest();
        message.ids = ((_a = object.ids) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseMoveEnvRequest() {
    return { id: 0, fromIndex: 0, toIndex: 0 };
}
exports.MoveEnvRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.fromIndex !== 0) {
            writer.uint32(16).int32(message.fromIndex);
        }
        if (message.toIndex !== 0) {
            writer.uint32(24).int32(message.toIndex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMoveEnvRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.fromIndex = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.toIndex = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            fromIndex: isSet(object.fromIndex) ? globalThis.Number(object.fromIndex) : 0,
            toIndex: isSet(object.toIndex) ? globalThis.Number(object.toIndex) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.fromIndex !== 0) {
            obj.fromIndex = Math.round(message.fromIndex);
        }
        if (message.toIndex !== 0) {
            obj.toIndex = Math.round(message.toIndex);
        }
        return obj;
    },
    create(base) {
        return exports.MoveEnvRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMoveEnvRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : 0;
        message.fromIndex = (_b = object.fromIndex) !== null && _b !== void 0 ? _b : 0;
        message.toIndex = (_c = object.toIndex) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseDisableEnvsRequest() {
    return { ids: [] };
}
exports.DisableEnvsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.ids) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDisableEnvsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.ids.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.ids.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.ids) ? object.ids.map((e) => globalThis.Number(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.ids = message.ids.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.DisableEnvsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDisableEnvsRequest();
        message.ids = ((_a = object.ids) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseEnableEnvsRequest() {
    return { ids: [] };
}
exports.EnableEnvsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.ids) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnableEnvsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.ids.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.ids.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.ids) ? object.ids.map((e) => globalThis.Number(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.ids = message.ids.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.EnableEnvsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEnableEnvsRequest();
        message.ids = ((_a = object.ids) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseUpdateEnvNamesRequest() {
    return { ids: [], name: "" };
}
exports.UpdateEnvNamesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.ids) {
            writer.int32(v);
        }
        writer.join();
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEnvNamesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.ids.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.ids.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.ids) ? object.ids.map((e) => globalThis.Number(e)) : [],
            name: isSet(object.name) ? globalThis.String(object.name) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.ids = message.ids.map((e) => Math.round(e));
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateEnvNamesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUpdateEnvNamesRequest();
        message.ids = ((_a = object.ids) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetEnvByIdRequest() {
    return { id: 0 };
}
exports.GetEnvByIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetEnvByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.GetEnvByIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetEnvByIdRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseEnvsResponse() {
    return { code: 0, data: [], message: undefined };
}
exports.EnvsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.code !== 0) {
            writer.uint32(8).int32(message.code);
        }
        for (const v of message.data) {
            exports.EnvItem.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.message !== undefined) {
            writer.uint32(26).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnvsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.code = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.data.push(exports.EnvItem.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? globalThis.Number(object.code) : 0,
            data: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.data) ? object.data.map((e) => exports.EnvItem.fromJSON(e)) : [],
            message: isSet(object.message) ? globalThis.String(object.message) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.code !== 0) {
            obj.code = Math.round(message.code);
        }
        if ((_a = message.data) === null || _a === void 0 ? void 0 : _a.length) {
            obj.data = message.data.map((e) => exports.EnvItem.toJSON(e));
        }
        if (message.message !== undefined) {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.EnvsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseEnvsResponse();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : 0;
        message.data = ((_b = object.data) === null || _b === void 0 ? void 0 : _b.map((e) => exports.EnvItem.fromPartial(e))) || [];
        message.message = (_c = object.message) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
function createBaseEnvResponse() {
    return { code: 0, data: undefined, message: undefined };
}
exports.EnvResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.code !== 0) {
            writer.uint32(8).int32(message.code);
        }
        if (message.data !== undefined) {
            exports.EnvItem.encode(message.data, writer.uint32(18).fork()).join();
        }
        if (message.message !== undefined) {
            writer.uint32(26).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnvResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.code = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.data = exports.EnvItem.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? globalThis.Number(object.code) : 0,
            data: isSet(object.data) ? exports.EnvItem.fromJSON(object.data) : undefined,
            message: isSet(object.message) ? globalThis.String(object.message) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== 0) {
            obj.code = Math.round(message.code);
        }
        if (message.data !== undefined) {
            obj.data = exports.EnvItem.toJSON(message.data);
        }
        if (message.message !== undefined) {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.EnvResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEnvResponse();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : 0;
        message.data = (object.data !== undefined && object.data !== null) ? exports.EnvItem.fromPartial(object.data) : undefined;
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBaseResponse() {
    return { code: 0, message: undefined };
}
exports.Response = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.code !== 0) {
            writer.uint32(8).int32(message.code);
        }
        if (message.message !== undefined) {
            writer.uint32(18).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.code = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? globalThis.Number(object.code) : 0,
            message: isSet(object.message) ? globalThis.String(object.message) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== 0) {
            obj.code = Math.round(message.code);
        }
        if (message.message !== undefined) {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.Response.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseResponse();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : 0;
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBaseExtraScheduleItem() {
    return { schedule: "" };
}
exports.ExtraScheduleItem = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.schedule !== "") {
            writer.uint32(10).string(message.schedule);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExtraScheduleItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.schedule = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { schedule: isSet(object.schedule) ? globalThis.String(object.schedule) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.schedule !== "") {
            obj.schedule = message.schedule;
        }
        return obj;
    },
    create(base) {
        return exports.ExtraScheduleItem.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseExtraScheduleItem();
        message.schedule = (_a = object.schedule) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseCronItem() {
    return {
        id: undefined,
        command: undefined,
        schedule: undefined,
        name: undefined,
        labels: [],
        sub_id: undefined,
        extra_schedules: [],
        task_before: undefined,
        task_after: undefined,
        status: undefined,
        log_path: undefined,
        pid: undefined,
        last_running_time: undefined,
        last_execution_time: undefined,
    };
}
exports.CronItem = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            writer.uint32(8).int32(message.id);
        }
        if (message.command !== undefined) {
            writer.uint32(18).string(message.command);
        }
        if (message.schedule !== undefined) {
            writer.uint32(26).string(message.schedule);
        }
        if (message.name !== undefined) {
            writer.uint32(34).string(message.name);
        }
        for (const v of message.labels) {
            writer.uint32(42).string(v);
        }
        if (message.sub_id !== undefined) {
            writer.uint32(48).int32(message.sub_id);
        }
        for (const v of message.extra_schedules) {
            exports.ExtraScheduleItem.encode(v, writer.uint32(58).fork()).join();
        }
        if (message.task_before !== undefined) {
            writer.uint32(66).string(message.task_before);
        }
        if (message.task_after !== undefined) {
            writer.uint32(74).string(message.task_after);
        }
        if (message.status !== undefined) {
            writer.uint32(80).int32(message.status);
        }
        if (message.log_path !== undefined) {
            writer.uint32(90).string(message.log_path);
        }
        if (message.pid !== undefined) {
            writer.uint32(96).int32(message.pid);
        }
        if (message.last_running_time !== undefined) {
            writer.uint32(104).int64(message.last_running_time);
        }
        if (message.last_execution_time !== undefined) {
            writer.uint32(112).int64(message.last_execution_time);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCronItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.command = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.schedule = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.labels.push(reader.string());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.sub_id = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.extra_schedules.push(exports.ExtraScheduleItem.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.task_before = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.task_after = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.log_path = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.pid = reader.int32();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.last_running_time = longToNumber(reader.int64());
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.last_execution_time = longToNumber(reader.int64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
            command: isSet(object.command) ? globalThis.String(object.command) : undefined,
            schedule: isSet(object.schedule) ? globalThis.String(object.schedule) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            labels: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.labels) ? object.labels.map((e) => globalThis.String(e)) : [],
            sub_id: isSet(object.sub_id) ? globalThis.Number(object.sub_id) : undefined,
            extra_schedules: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.extra_schedules)
                ? object.extra_schedules.map((e) => exports.ExtraScheduleItem.fromJSON(e))
                : [],
            task_before: isSet(object.task_before) ? globalThis.String(object.task_before) : undefined,
            task_after: isSet(object.task_after) ? globalThis.String(object.task_after) : undefined,
            status: isSet(object.status) ? globalThis.Number(object.status) : undefined,
            log_path: isSet(object.log_path) ? globalThis.String(object.log_path) : undefined,
            pid: isSet(object.pid) ? globalThis.Number(object.pid) : undefined,
            last_running_time: isSet(object.last_running_time) ? globalThis.Number(object.last_running_time) : undefined,
            last_execution_time: isSet(object.last_execution_time)
                ? globalThis.Number(object.last_execution_time)
                : undefined,
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.id !== undefined) {
            obj.id = Math.round(message.id);
        }
        if (message.command !== undefined) {
            obj.command = message.command;
        }
        if (message.schedule !== undefined) {
            obj.schedule = message.schedule;
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if ((_a = message.labels) === null || _a === void 0 ? void 0 : _a.length) {
            obj.labels = message.labels;
        }
        if (message.sub_id !== undefined) {
            obj.sub_id = Math.round(message.sub_id);
        }
        if ((_b = message.extra_schedules) === null || _b === void 0 ? void 0 : _b.length) {
            obj.extra_schedules = message.extra_schedules.map((e) => exports.ExtraScheduleItem.toJSON(e));
        }
        if (message.task_before !== undefined) {
            obj.task_before = message.task_before;
        }
        if (message.task_after !== undefined) {
            obj.task_after = message.task_after;
        }
        if (message.status !== undefined) {
            obj.status = Math.round(message.status);
        }
        if (message.log_path !== undefined) {
            obj.log_path = message.log_path;
        }
        if (message.pid !== undefined) {
            obj.pid = Math.round(message.pid);
        }
        if (message.last_running_time !== undefined) {
            obj.last_running_time = Math.round(message.last_running_time);
        }
        if (message.last_execution_time !== undefined) {
            obj.last_execution_time = Math.round(message.last_execution_time);
        }
        return obj;
    },
    create(base) {
        return exports.CronItem.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        const message = createBaseCronItem();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : undefined;
        message.command = (_b = object.command) !== null && _b !== void 0 ? _b : undefined;
        message.schedule = (_c = object.schedule) !== null && _c !== void 0 ? _c : undefined;
        message.name = (_d = object.name) !== null && _d !== void 0 ? _d : undefined;
        message.labels = ((_e = object.labels) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.sub_id = (_f = object.sub_id) !== null && _f !== void 0 ? _f : undefined;
        message.extra_schedules = ((_g = object.extra_schedules) === null || _g === void 0 ? void 0 : _g.map((e) => exports.ExtraScheduleItem.fromPartial(e))) || [];
        message.task_before = (_h = object.task_before) !== null && _h !== void 0 ? _h : undefined;
        message.task_after = (_j = object.task_after) !== null && _j !== void 0 ? _j : undefined;
        message.status = (_k = object.status) !== null && _k !== void 0 ? _k : undefined;
        message.log_path = (_l = object.log_path) !== null && _l !== void 0 ? _l : undefined;
        message.pid = (_m = object.pid) !== null && _m !== void 0 ? _m : undefined;
        message.last_running_time = (_o = object.last_running_time) !== null && _o !== void 0 ? _o : undefined;
        message.last_execution_time = (_p = object.last_execution_time) !== null && _p !== void 0 ? _p : undefined;
        return message;
    },
};
function createBaseCreateCronRequest() {
    return {
        command: "",
        schedule: "",
        name: undefined,
        labels: [],
        sub_id: undefined,
        extra_schedules: [],
        task_before: undefined,
        task_after: undefined,
    };
}
exports.CreateCronRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.command !== "") {
            writer.uint32(10).string(message.command);
        }
        if (message.schedule !== "") {
            writer.uint32(18).string(message.schedule);
        }
        if (message.name !== undefined) {
            writer.uint32(26).string(message.name);
        }
        for (const v of message.labels) {
            writer.uint32(34).string(v);
        }
        if (message.sub_id !== undefined) {
            writer.uint32(40).int32(message.sub_id);
        }
        for (const v of message.extra_schedules) {
            exports.ExtraScheduleItem.encode(v, writer.uint32(50).fork()).join();
        }
        if (message.task_before !== undefined) {
            writer.uint32(58).string(message.task_before);
        }
        if (message.task_after !== undefined) {
            writer.uint32(66).string(message.task_after);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateCronRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.command = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.schedule = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.labels.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.sub_id = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.extra_schedules.push(exports.ExtraScheduleItem.decode(reader, reader.uint32()));
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.task_before = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.task_after = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            command: isSet(object.command) ? globalThis.String(object.command) : "",
            schedule: isSet(object.schedule) ? globalThis.String(object.schedule) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            labels: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.labels) ? object.labels.map((e) => globalThis.String(e)) : [],
            sub_id: isSet(object.sub_id) ? globalThis.Number(object.sub_id) : undefined,
            extra_schedules: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.extra_schedules)
                ? object.extra_schedules.map((e) => exports.ExtraScheduleItem.fromJSON(e))
                : [],
            task_before: isSet(object.task_before) ? globalThis.String(object.task_before) : undefined,
            task_after: isSet(object.task_after) ? globalThis.String(object.task_after) : undefined,
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.command !== "") {
            obj.command = message.command;
        }
        if (message.schedule !== "") {
            obj.schedule = message.schedule;
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if ((_a = message.labels) === null || _a === void 0 ? void 0 : _a.length) {
            obj.labels = message.labels;
        }
        if (message.sub_id !== undefined) {
            obj.sub_id = Math.round(message.sub_id);
        }
        if ((_b = message.extra_schedules) === null || _b === void 0 ? void 0 : _b.length) {
            obj.extra_schedules = message.extra_schedules.map((e) => exports.ExtraScheduleItem.toJSON(e));
        }
        if (message.task_before !== undefined) {
            obj.task_before = message.task_before;
        }
        if (message.task_after !== undefined) {
            obj.task_after = message.task_after;
        }
        return obj;
    },
    create(base) {
        return exports.CreateCronRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseCreateCronRequest();
        message.command = (_a = object.command) !== null && _a !== void 0 ? _a : "";
        message.schedule = (_b = object.schedule) !== null && _b !== void 0 ? _b : "";
        message.name = (_c = object.name) !== null && _c !== void 0 ? _c : undefined;
        message.labels = ((_d = object.labels) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.sub_id = (_e = object.sub_id) !== null && _e !== void 0 ? _e : undefined;
        message.extra_schedules = ((_f = object.extra_schedules) === null || _f === void 0 ? void 0 : _f.map((e) => exports.ExtraScheduleItem.fromPartial(e))) || [];
        message.task_before = (_g = object.task_before) !== null && _g !== void 0 ? _g : undefined;
        message.task_after = (_h = object.task_after) !== null && _h !== void 0 ? _h : undefined;
        return message;
    },
};
function createBaseUpdateCronRequest() {
    return {
        id: 0,
        command: undefined,
        schedule: undefined,
        name: undefined,
        labels: [],
        sub_id: undefined,
        extra_schedules: [],
        task_before: undefined,
        task_after: undefined,
    };
}
exports.UpdateCronRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.command !== undefined) {
            writer.uint32(18).string(message.command);
        }
        if (message.schedule !== undefined) {
            writer.uint32(26).string(message.schedule);
        }
        if (message.name !== undefined) {
            writer.uint32(34).string(message.name);
        }
        for (const v of message.labels) {
            writer.uint32(42).string(v);
        }
        if (message.sub_id !== undefined) {
            writer.uint32(48).int32(message.sub_id);
        }
        for (const v of message.extra_schedules) {
            exports.ExtraScheduleItem.encode(v, writer.uint32(58).fork()).join();
        }
        if (message.task_before !== undefined) {
            writer.uint32(66).string(message.task_before);
        }
        if (message.task_after !== undefined) {
            writer.uint32(74).string(message.task_after);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateCronRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.command = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.schedule = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.labels.push(reader.string());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.sub_id = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.extra_schedules.push(exports.ExtraScheduleItem.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.task_before = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.task_after = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            command: isSet(object.command) ? globalThis.String(object.command) : undefined,
            schedule: isSet(object.schedule) ? globalThis.String(object.schedule) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            labels: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.labels) ? object.labels.map((e) => globalThis.String(e)) : [],
            sub_id: isSet(object.sub_id) ? globalThis.Number(object.sub_id) : undefined,
            extra_schedules: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.extra_schedules)
                ? object.extra_schedules.map((e) => exports.ExtraScheduleItem.fromJSON(e))
                : [],
            task_before: isSet(object.task_before) ? globalThis.String(object.task_before) : undefined,
            task_after: isSet(object.task_after) ? globalThis.String(object.task_after) : undefined,
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.command !== undefined) {
            obj.command = message.command;
        }
        if (message.schedule !== undefined) {
            obj.schedule = message.schedule;
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if ((_a = message.labels) === null || _a === void 0 ? void 0 : _a.length) {
            obj.labels = message.labels;
        }
        if (message.sub_id !== undefined) {
            obj.sub_id = Math.round(message.sub_id);
        }
        if ((_b = message.extra_schedules) === null || _b === void 0 ? void 0 : _b.length) {
            obj.extra_schedules = message.extra_schedules.map((e) => exports.ExtraScheduleItem.toJSON(e));
        }
        if (message.task_before !== undefined) {
            obj.task_before = message.task_before;
        }
        if (message.task_after !== undefined) {
            obj.task_after = message.task_after;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateCronRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseUpdateCronRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : 0;
        message.command = (_b = object.command) !== null && _b !== void 0 ? _b : undefined;
        message.schedule = (_c = object.schedule) !== null && _c !== void 0 ? _c : undefined;
        message.name = (_d = object.name) !== null && _d !== void 0 ? _d : undefined;
        message.labels = ((_e = object.labels) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.sub_id = (_f = object.sub_id) !== null && _f !== void 0 ? _f : undefined;
        message.extra_schedules = ((_g = object.extra_schedules) === null || _g === void 0 ? void 0 : _g.map((e) => exports.ExtraScheduleItem.fromPartial(e))) || [];
        message.task_before = (_h = object.task_before) !== null && _h !== void 0 ? _h : undefined;
        message.task_after = (_j = object.task_after) !== null && _j !== void 0 ? _j : undefined;
        return message;
    },
};
function createBaseDeleteCronsRequest() {
    return { ids: [] };
}
exports.DeleteCronsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.ids) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteCronsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.ids.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.ids.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.ids) ? object.ids.map((e) => globalThis.Number(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.ids = message.ids.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.DeleteCronsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDeleteCronsRequest();
        message.ids = ((_a = object.ids) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseCronsResponse() {
    return { code: 0, data: [], message: undefined };
}
exports.CronsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.code !== 0) {
            writer.uint32(8).int32(message.code);
        }
        for (const v of message.data) {
            exports.CronItem.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.message !== undefined) {
            writer.uint32(26).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCronsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.code = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.data.push(exports.CronItem.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? globalThis.Number(object.code) : 0,
            data: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.data) ? object.data.map((e) => exports.CronItem.fromJSON(e)) : [],
            message: isSet(object.message) ? globalThis.String(object.message) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.code !== 0) {
            obj.code = Math.round(message.code);
        }
        if ((_a = message.data) === null || _a === void 0 ? void 0 : _a.length) {
            obj.data = message.data.map((e) => exports.CronItem.toJSON(e));
        }
        if (message.message !== undefined) {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.CronsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseCronsResponse();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : 0;
        message.data = ((_b = object.data) === null || _b === void 0 ? void 0 : _b.map((e) => exports.CronItem.fromPartial(e))) || [];
        message.message = (_c = object.message) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
function createBaseCronResponse() {
    return { code: 0, data: undefined, message: undefined };
}
exports.CronResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.code !== 0) {
            writer.uint32(8).int32(message.code);
        }
        if (message.data !== undefined) {
            exports.CronItem.encode(message.data, writer.uint32(18).fork()).join();
        }
        if (message.message !== undefined) {
            writer.uint32(26).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCronResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.code = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.data = exports.CronItem.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? globalThis.Number(object.code) : 0,
            data: isSet(object.data) ? exports.CronItem.fromJSON(object.data) : undefined,
            message: isSet(object.message) ? globalThis.String(object.message) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== 0) {
            obj.code = Math.round(message.code);
        }
        if (message.data !== undefined) {
            obj.data = exports.CronItem.toJSON(message.data);
        }
        if (message.message !== undefined) {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.CronResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCronResponse();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : 0;
        message.data = (object.data !== undefined && object.data !== null) ? exports.CronItem.fromPartial(object.data) : undefined;
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBaseCronDetailRequest() {
    return { log_path: "" };
}
exports.CronDetailRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.log_path !== "") {
            writer.uint32(10).string(message.log_path);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCronDetailRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.log_path = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { log_path: isSet(object.log_path) ? globalThis.String(object.log_path) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.log_path !== "") {
            obj.log_path = message.log_path;
        }
        return obj;
    },
    create(base) {
        return exports.CronDetailRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseCronDetailRequest();
        message.log_path = (_a = object.log_path) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseCronDetailResponse() {
    return { code: 0, data: undefined, message: undefined };
}
exports.CronDetailResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.code !== 0) {
            writer.uint32(8).int32(message.code);
        }
        if (message.data !== undefined) {
            exports.CronItem.encode(message.data, writer.uint32(18).fork()).join();
        }
        if (message.message !== undefined) {
            writer.uint32(26).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCronDetailResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.code = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.data = exports.CronItem.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? globalThis.Number(object.code) : 0,
            data: isSet(object.data) ? exports.CronItem.fromJSON(object.data) : undefined,
            message: isSet(object.message) ? globalThis.String(object.message) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== 0) {
            obj.code = Math.round(message.code);
        }
        if (message.data !== undefined) {
            obj.data = exports.CronItem.toJSON(message.data);
        }
        if (message.message !== undefined) {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.CronDetailResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCronDetailResponse();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : 0;
        message.data = (object.data !== undefined && object.data !== null) ? exports.CronItem.fromPartial(object.data) : undefined;
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBaseNotificationInfo() {
    return {
        type: 0,
        gotifyUrl: undefined,
        gotifyToken: undefined,
        gotifyPriority: undefined,
        goCqHttpBotUrl: undefined,
        goCqHttpBotToken: undefined,
        goCqHttpBotQq: undefined,
        serverChanKey: undefined,
        pushDeerKey: undefined,
        pushDeerUrl: undefined,
        synologyChatUrl: undefined,
        barkPush: undefined,
        barkIcon: undefined,
        barkSound: undefined,
        barkGroup: undefined,
        barkLevel: undefined,
        barkUrl: undefined,
        barkArchive: undefined,
        telegramBotToken: undefined,
        telegramBotUserId: undefined,
        telegramBotProxyHost: undefined,
        telegramBotProxyPort: undefined,
        telegramBotProxyAuth: undefined,
        telegramBotApiHost: undefined,
        dingtalkBotToken: undefined,
        dingtalkBotSecret: undefined,
        weWorkBotKey: undefined,
        weWorkOrigin: undefined,
        weWorkAppKey: undefined,
        aibotkKey: undefined,
        aibotkType: undefined,
        aibotkName: undefined,
        iGotPushKey: undefined,
        pushPlusToken: undefined,
        pushPlusUser: undefined,
        pushPlusTemplate: undefined,
        pushplusChannel: undefined,
        pushplusWebhook: undefined,
        pushplusCallbackUrl: undefined,
        pushplusTo: undefined,
        wePlusBotToken: undefined,
        wePlusBotReceiver: undefined,
        wePlusBotVersion: undefined,
        emailService: undefined,
        emailUser: undefined,
        emailPass: undefined,
        emailTo: undefined,
        pushMeKey: undefined,
        pushMeUrl: undefined,
        chronocatURL: undefined,
        chronocatQQ: undefined,
        chronocatToken: undefined,
        webhookHeaders: undefined,
        webhookBody: undefined,
        webhookUrl: undefined,
        webhookMethod: undefined,
        webhookContentType: undefined,
        larkKey: undefined,
        ntfyUrl: undefined,
        ntfyTopic: undefined,
        ntfyPriority: undefined,
        ntfyToken: undefined,
        ntfyUsername: undefined,
        ntfyPassword: undefined,
        ntfyActions: undefined,
        wxPusherBotAppToken: undefined,
        wxPusherBotTopicIds: undefined,
        wxPusherBotUids: undefined,
    };
}
exports.NotificationInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.gotifyUrl !== undefined) {
            writer.uint32(18).string(message.gotifyUrl);
        }
        if (message.gotifyToken !== undefined) {
            writer.uint32(26).string(message.gotifyToken);
        }
        if (message.gotifyPriority !== undefined) {
            writer.uint32(32).int32(message.gotifyPriority);
        }
        if (message.goCqHttpBotUrl !== undefined) {
            writer.uint32(42).string(message.goCqHttpBotUrl);
        }
        if (message.goCqHttpBotToken !== undefined) {
            writer.uint32(50).string(message.goCqHttpBotToken);
        }
        if (message.goCqHttpBotQq !== undefined) {
            writer.uint32(58).string(message.goCqHttpBotQq);
        }
        if (message.serverChanKey !== undefined) {
            writer.uint32(66).string(message.serverChanKey);
        }
        if (message.pushDeerKey !== undefined) {
            writer.uint32(74).string(message.pushDeerKey);
        }
        if (message.pushDeerUrl !== undefined) {
            writer.uint32(82).string(message.pushDeerUrl);
        }
        if (message.synologyChatUrl !== undefined) {
            writer.uint32(90).string(message.synologyChatUrl);
        }
        if (message.barkPush !== undefined) {
            writer.uint32(98).string(message.barkPush);
        }
        if (message.barkIcon !== undefined) {
            writer.uint32(106).string(message.barkIcon);
        }
        if (message.barkSound !== undefined) {
            writer.uint32(114).string(message.barkSound);
        }
        if (message.barkGroup !== undefined) {
            writer.uint32(122).string(message.barkGroup);
        }
        if (message.barkLevel !== undefined) {
            writer.uint32(130).string(message.barkLevel);
        }
        if (message.barkUrl !== undefined) {
            writer.uint32(138).string(message.barkUrl);
        }
        if (message.barkArchive !== undefined) {
            writer.uint32(146).string(message.barkArchive);
        }
        if (message.telegramBotToken !== undefined) {
            writer.uint32(154).string(message.telegramBotToken);
        }
        if (message.telegramBotUserId !== undefined) {
            writer.uint32(162).string(message.telegramBotUserId);
        }
        if (message.telegramBotProxyHost !== undefined) {
            writer.uint32(170).string(message.telegramBotProxyHost);
        }
        if (message.telegramBotProxyPort !== undefined) {
            writer.uint32(178).string(message.telegramBotProxyPort);
        }
        if (message.telegramBotProxyAuth !== undefined) {
            writer.uint32(186).string(message.telegramBotProxyAuth);
        }
        if (message.telegramBotApiHost !== undefined) {
            writer.uint32(194).string(message.telegramBotApiHost);
        }
        if (message.dingtalkBotToken !== undefined) {
            writer.uint32(202).string(message.dingtalkBotToken);
        }
        if (message.dingtalkBotSecret !== undefined) {
            writer.uint32(210).string(message.dingtalkBotSecret);
        }
        if (message.weWorkBotKey !== undefined) {
            writer.uint32(218).string(message.weWorkBotKey);
        }
        if (message.weWorkOrigin !== undefined) {
            writer.uint32(226).string(message.weWorkOrigin);
        }
        if (message.weWorkAppKey !== undefined) {
            writer.uint32(234).string(message.weWorkAppKey);
        }
        if (message.aibotkKey !== undefined) {
            writer.uint32(242).string(message.aibotkKey);
        }
        if (message.aibotkType !== undefined) {
            writer.uint32(250).string(message.aibotkType);
        }
        if (message.aibotkName !== undefined) {
            writer.uint32(258).string(message.aibotkName);
        }
        if (message.iGotPushKey !== undefined) {
            writer.uint32(266).string(message.iGotPushKey);
        }
        if (message.pushPlusToken !== undefined) {
            writer.uint32(274).string(message.pushPlusToken);
        }
        if (message.pushPlusUser !== undefined) {
            writer.uint32(282).string(message.pushPlusUser);
        }
        if (message.pushPlusTemplate !== undefined) {
            writer.uint32(290).string(message.pushPlusTemplate);
        }
        if (message.pushplusChannel !== undefined) {
            writer.uint32(298).string(message.pushplusChannel);
        }
        if (message.pushplusWebhook !== undefined) {
            writer.uint32(306).string(message.pushplusWebhook);
        }
        if (message.pushplusCallbackUrl !== undefined) {
            writer.uint32(314).string(message.pushplusCallbackUrl);
        }
        if (message.pushplusTo !== undefined) {
            writer.uint32(322).string(message.pushplusTo);
        }
        if (message.wePlusBotToken !== undefined) {
            writer.uint32(330).string(message.wePlusBotToken);
        }
        if (message.wePlusBotReceiver !== undefined) {
            writer.uint32(338).string(message.wePlusBotReceiver);
        }
        if (message.wePlusBotVersion !== undefined) {
            writer.uint32(346).string(message.wePlusBotVersion);
        }
        if (message.emailService !== undefined) {
            writer.uint32(354).string(message.emailService);
        }
        if (message.emailUser !== undefined) {
            writer.uint32(362).string(message.emailUser);
        }
        if (message.emailPass !== undefined) {
            writer.uint32(370).string(message.emailPass);
        }
        if (message.emailTo !== undefined) {
            writer.uint32(378).string(message.emailTo);
        }
        if (message.pushMeKey !== undefined) {
            writer.uint32(386).string(message.pushMeKey);
        }
        if (message.pushMeUrl !== undefined) {
            writer.uint32(394).string(message.pushMeUrl);
        }
        if (message.chronocatURL !== undefined) {
            writer.uint32(402).string(message.chronocatURL);
        }
        if (message.chronocatQQ !== undefined) {
            writer.uint32(410).string(message.chronocatQQ);
        }
        if (message.chronocatToken !== undefined) {
            writer.uint32(418).string(message.chronocatToken);
        }
        if (message.webhookHeaders !== undefined) {
            writer.uint32(426).string(message.webhookHeaders);
        }
        if (message.webhookBody !== undefined) {
            writer.uint32(434).string(message.webhookBody);
        }
        if (message.webhookUrl !== undefined) {
            writer.uint32(442).string(message.webhookUrl);
        }
        if (message.webhookMethod !== undefined) {
            writer.uint32(450).string(message.webhookMethod);
        }
        if (message.webhookContentType !== undefined) {
            writer.uint32(458).string(message.webhookContentType);
        }
        if (message.larkKey !== undefined) {
            writer.uint32(466).string(message.larkKey);
        }
        if (message.ntfyUrl !== undefined) {
            writer.uint32(474).string(message.ntfyUrl);
        }
        if (message.ntfyTopic !== undefined) {
            writer.uint32(482).string(message.ntfyTopic);
        }
        if (message.ntfyPriority !== undefined) {
            writer.uint32(490).string(message.ntfyPriority);
        }
        if (message.ntfyToken !== undefined) {
            writer.uint32(498).string(message.ntfyToken);
        }
        if (message.ntfyUsername !== undefined) {
            writer.uint32(506).string(message.ntfyUsername);
        }
        if (message.ntfyPassword !== undefined) {
            writer.uint32(514).string(message.ntfyPassword);
        }
        if (message.ntfyActions !== undefined) {
            writer.uint32(522).string(message.ntfyActions);
        }
        if (message.wxPusherBotAppToken !== undefined) {
            writer.uint32(530).string(message.wxPusherBotAppToken);
        }
        if (message.wxPusherBotTopicIds !== undefined) {
            writer.uint32(538).string(message.wxPusherBotTopicIds);
        }
        if (message.wxPusherBotUids !== undefined) {
            writer.uint32(546).string(message.wxPusherBotUids);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotificationInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.gotifyUrl = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.gotifyToken = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.gotifyPriority = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.goCqHttpBotUrl = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.goCqHttpBotToken = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.goCqHttpBotQq = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.serverChanKey = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.pushDeerKey = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.pushDeerUrl = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.synologyChatUrl = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.barkPush = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.barkIcon = reader.string();
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.barkSound = reader.string();
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.barkGroup = reader.string();
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.barkLevel = reader.string();
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.barkUrl = reader.string();
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.barkArchive = reader.string();
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.telegramBotToken = reader.string();
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.telegramBotUserId = reader.string();
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.telegramBotProxyHost = reader.string();
                    continue;
                }
                case 22: {
                    if (tag !== 178) {
                        break;
                    }
                    message.telegramBotProxyPort = reader.string();
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.telegramBotProxyAuth = reader.string();
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.telegramBotApiHost = reader.string();
                    continue;
                }
                case 25: {
                    if (tag !== 202) {
                        break;
                    }
                    message.dingtalkBotToken = reader.string();
                    continue;
                }
                case 26: {
                    if (tag !== 210) {
                        break;
                    }
                    message.dingtalkBotSecret = reader.string();
                    continue;
                }
                case 27: {
                    if (tag !== 218) {
                        break;
                    }
                    message.weWorkBotKey = reader.string();
                    continue;
                }
                case 28: {
                    if (tag !== 226) {
                        break;
                    }
                    message.weWorkOrigin = reader.string();
                    continue;
                }
                case 29: {
                    if (tag !== 234) {
                        break;
                    }
                    message.weWorkAppKey = reader.string();
                    continue;
                }
                case 30: {
                    if (tag !== 242) {
                        break;
                    }
                    message.aibotkKey = reader.string();
                    continue;
                }
                case 31: {
                    if (tag !== 250) {
                        break;
                    }
                    message.aibotkType = reader.string();
                    continue;
                }
                case 32: {
                    if (tag !== 258) {
                        break;
                    }
                    message.aibotkName = reader.string();
                    continue;
                }
                case 33: {
                    if (tag !== 266) {
                        break;
                    }
                    message.iGotPushKey = reader.string();
                    continue;
                }
                case 34: {
                    if (tag !== 274) {
                        break;
                    }
                    message.pushPlusToken = reader.string();
                    continue;
                }
                case 35: {
                    if (tag !== 282) {
                        break;
                    }
                    message.pushPlusUser = reader.string();
                    continue;
                }
                case 36: {
                    if (tag !== 290) {
                        break;
                    }
                    message.pushPlusTemplate = reader.string();
                    continue;
                }
                case 37: {
                    if (tag !== 298) {
                        break;
                    }
                    message.pushplusChannel = reader.string();
                    continue;
                }
                case 38: {
                    if (tag !== 306) {
                        break;
                    }
                    message.pushplusWebhook = reader.string();
                    continue;
                }
                case 39: {
                    if (tag !== 314) {
                        break;
                    }
                    message.pushplusCallbackUrl = reader.string();
                    continue;
                }
                case 40: {
                    if (tag !== 322) {
                        break;
                    }
                    message.pushplusTo = reader.string();
                    continue;
                }
                case 41: {
                    if (tag !== 330) {
                        break;
                    }
                    message.wePlusBotToken = reader.string();
                    continue;
                }
                case 42: {
                    if (tag !== 338) {
                        break;
                    }
                    message.wePlusBotReceiver = reader.string();
                    continue;
                }
                case 43: {
                    if (tag !== 346) {
                        break;
                    }
                    message.wePlusBotVersion = reader.string();
                    continue;
                }
                case 44: {
                    if (tag !== 354) {
                        break;
                    }
                    message.emailService = reader.string();
                    continue;
                }
                case 45: {
                    if (tag !== 362) {
                        break;
                    }
                    message.emailUser = reader.string();
                    continue;
                }
                case 46: {
                    if (tag !== 370) {
                        break;
                    }
                    message.emailPass = reader.string();
                    continue;
                }
                case 47: {
                    if (tag !== 378) {
                        break;
                    }
                    message.emailTo = reader.string();
                    continue;
                }
                case 48: {
                    if (tag !== 386) {
                        break;
                    }
                    message.pushMeKey = reader.string();
                    continue;
                }
                case 49: {
                    if (tag !== 394) {
                        break;
                    }
                    message.pushMeUrl = reader.string();
                    continue;
                }
                case 50: {
                    if (tag !== 402) {
                        break;
                    }
                    message.chronocatURL = reader.string();
                    continue;
                }
                case 51: {
                    if (tag !== 410) {
                        break;
                    }
                    message.chronocatQQ = reader.string();
                    continue;
                }
                case 52: {
                    if (tag !== 418) {
                        break;
                    }
                    message.chronocatToken = reader.string();
                    continue;
                }
                case 53: {
                    if (tag !== 426) {
                        break;
                    }
                    message.webhookHeaders = reader.string();
                    continue;
                }
                case 54: {
                    if (tag !== 434) {
                        break;
                    }
                    message.webhookBody = reader.string();
                    continue;
                }
                case 55: {
                    if (tag !== 442) {
                        break;
                    }
                    message.webhookUrl = reader.string();
                    continue;
                }
                case 56: {
                    if (tag !== 450) {
                        break;
                    }
                    message.webhookMethod = reader.string();
                    continue;
                }
                case 57: {
                    if (tag !== 458) {
                        break;
                    }
                    message.webhookContentType = reader.string();
                    continue;
                }
                case 58: {
                    if (tag !== 466) {
                        break;
                    }
                    message.larkKey = reader.string();
                    continue;
                }
                case 59: {
                    if (tag !== 474) {
                        break;
                    }
                    message.ntfyUrl = reader.string();
                    continue;
                }
                case 60: {
                    if (tag !== 482) {
                        break;
                    }
                    message.ntfyTopic = reader.string();
                    continue;
                }
                case 61: {
                    if (tag !== 490) {
                        break;
                    }
                    message.ntfyPriority = reader.string();
                    continue;
                }
                case 62: {
                    if (tag !== 498) {
                        break;
                    }
                    message.ntfyToken = reader.string();
                    continue;
                }
                case 63: {
                    if (tag !== 506) {
                        break;
                    }
                    message.ntfyUsername = reader.string();
                    continue;
                }
                case 64: {
                    if (tag !== 514) {
                        break;
                    }
                    message.ntfyPassword = reader.string();
                    continue;
                }
                case 65: {
                    if (tag !== 522) {
                        break;
                    }
                    message.ntfyActions = reader.string();
                    continue;
                }
                case 66: {
                    if (tag !== 530) {
                        break;
                    }
                    message.wxPusherBotAppToken = reader.string();
                    continue;
                }
                case 67: {
                    if (tag !== 538) {
                        break;
                    }
                    message.wxPusherBotTopicIds = reader.string();
                    continue;
                }
                case 68: {
                    if (tag !== 546) {
                        break;
                    }
                    message.wxPusherBotUids = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? notificationModeFromJSON(object.type) : 0,
            gotifyUrl: isSet(object.gotifyUrl) ? globalThis.String(object.gotifyUrl) : undefined,
            gotifyToken: isSet(object.gotifyToken) ? globalThis.String(object.gotifyToken) : undefined,
            gotifyPriority: isSet(object.gotifyPriority) ? globalThis.Number(object.gotifyPriority) : undefined,
            goCqHttpBotUrl: isSet(object.goCqHttpBotUrl) ? globalThis.String(object.goCqHttpBotUrl) : undefined,
            goCqHttpBotToken: isSet(object.goCqHttpBotToken) ? globalThis.String(object.goCqHttpBotToken) : undefined,
            goCqHttpBotQq: isSet(object.goCqHttpBotQq) ? globalThis.String(object.goCqHttpBotQq) : undefined,
            serverChanKey: isSet(object.serverChanKey) ? globalThis.String(object.serverChanKey) : undefined,
            pushDeerKey: isSet(object.pushDeerKey) ? globalThis.String(object.pushDeerKey) : undefined,
            pushDeerUrl: isSet(object.pushDeerUrl) ? globalThis.String(object.pushDeerUrl) : undefined,
            synologyChatUrl: isSet(object.synologyChatUrl) ? globalThis.String(object.synologyChatUrl) : undefined,
            barkPush: isSet(object.barkPush) ? globalThis.String(object.barkPush) : undefined,
            barkIcon: isSet(object.barkIcon) ? globalThis.String(object.barkIcon) : undefined,
            barkSound: isSet(object.barkSound) ? globalThis.String(object.barkSound) : undefined,
            barkGroup: isSet(object.barkGroup) ? globalThis.String(object.barkGroup) : undefined,
            barkLevel: isSet(object.barkLevel) ? globalThis.String(object.barkLevel) : undefined,
            barkUrl: isSet(object.barkUrl) ? globalThis.String(object.barkUrl) : undefined,
            barkArchive: isSet(object.barkArchive) ? globalThis.String(object.barkArchive) : undefined,
            telegramBotToken: isSet(object.telegramBotToken) ? globalThis.String(object.telegramBotToken) : undefined,
            telegramBotUserId: isSet(object.telegramBotUserId) ? globalThis.String(object.telegramBotUserId) : undefined,
            telegramBotProxyHost: isSet(object.telegramBotProxyHost)
                ? globalThis.String(object.telegramBotProxyHost)
                : undefined,
            telegramBotProxyPort: isSet(object.telegramBotProxyPort)
                ? globalThis.String(object.telegramBotProxyPort)
                : undefined,
            telegramBotProxyAuth: isSet(object.telegramBotProxyAuth)
                ? globalThis.String(object.telegramBotProxyAuth)
                : undefined,
            telegramBotApiHost: isSet(object.telegramBotApiHost) ? globalThis.String(object.telegramBotApiHost) : undefined,
            dingtalkBotToken: isSet(object.dingtalkBotToken) ? globalThis.String(object.dingtalkBotToken) : undefined,
            dingtalkBotSecret: isSet(object.dingtalkBotSecret) ? globalThis.String(object.dingtalkBotSecret) : undefined,
            weWorkBotKey: isSet(object.weWorkBotKey) ? globalThis.String(object.weWorkBotKey) : undefined,
            weWorkOrigin: isSet(object.weWorkOrigin) ? globalThis.String(object.weWorkOrigin) : undefined,
            weWorkAppKey: isSet(object.weWorkAppKey) ? globalThis.String(object.weWorkAppKey) : undefined,
            aibotkKey: isSet(object.aibotkKey) ? globalThis.String(object.aibotkKey) : undefined,
            aibotkType: isSet(object.aibotkType) ? globalThis.String(object.aibotkType) : undefined,
            aibotkName: isSet(object.aibotkName) ? globalThis.String(object.aibotkName) : undefined,
            iGotPushKey: isSet(object.iGotPushKey) ? globalThis.String(object.iGotPushKey) : undefined,
            pushPlusToken: isSet(object.pushPlusToken) ? globalThis.String(object.pushPlusToken) : undefined,
            pushPlusUser: isSet(object.pushPlusUser) ? globalThis.String(object.pushPlusUser) : undefined,
            pushPlusTemplate: isSet(object.pushPlusTemplate) ? globalThis.String(object.pushPlusTemplate) : undefined,
            pushplusChannel: isSet(object.pushplusChannel) ? globalThis.String(object.pushplusChannel) : undefined,
            pushplusWebhook: isSet(object.pushplusWebhook) ? globalThis.String(object.pushplusWebhook) : undefined,
            pushplusCallbackUrl: isSet(object.pushplusCallbackUrl)
                ? globalThis.String(object.pushplusCallbackUrl)
                : undefined,
            pushplusTo: isSet(object.pushplusTo) ? globalThis.String(object.pushplusTo) : undefined,
            wePlusBotToken: isSet(object.wePlusBotToken) ? globalThis.String(object.wePlusBotToken) : undefined,
            wePlusBotReceiver: isSet(object.wePlusBotReceiver) ? globalThis.String(object.wePlusBotReceiver) : undefined,
            wePlusBotVersion: isSet(object.wePlusBotVersion) ? globalThis.String(object.wePlusBotVersion) : undefined,
            emailService: isSet(object.emailService) ? globalThis.String(object.emailService) : undefined,
            emailUser: isSet(object.emailUser) ? globalThis.String(object.emailUser) : undefined,
            emailPass: isSet(object.emailPass) ? globalThis.String(object.emailPass) : undefined,
            emailTo: isSet(object.emailTo) ? globalThis.String(object.emailTo) : undefined,
            pushMeKey: isSet(object.pushMeKey) ? globalThis.String(object.pushMeKey) : undefined,
            pushMeUrl: isSet(object.pushMeUrl) ? globalThis.String(object.pushMeUrl) : undefined,
            chronocatURL: isSet(object.chronocatURL) ? globalThis.String(object.chronocatURL) : undefined,
            chronocatQQ: isSet(object.chronocatQQ) ? globalThis.String(object.chronocatQQ) : undefined,
            chronocatToken: isSet(object.chronocatToken) ? globalThis.String(object.chronocatToken) : undefined,
            webhookHeaders: isSet(object.webhookHeaders) ? globalThis.String(object.webhookHeaders) : undefined,
            webhookBody: isSet(object.webhookBody) ? globalThis.String(object.webhookBody) : undefined,
            webhookUrl: isSet(object.webhookUrl) ? globalThis.String(object.webhookUrl) : undefined,
            webhookMethod: isSet(object.webhookMethod) ? globalThis.String(object.webhookMethod) : undefined,
            webhookContentType: isSet(object.webhookContentType) ? globalThis.String(object.webhookContentType) : undefined,
            larkKey: isSet(object.larkKey) ? globalThis.String(object.larkKey) : undefined,
            ntfyUrl: isSet(object.ntfyUrl) ? globalThis.String(object.ntfyUrl) : undefined,
            ntfyTopic: isSet(object.ntfyTopic) ? globalThis.String(object.ntfyTopic) : undefined,
            ntfyPriority: isSet(object.ntfyPriority) ? globalThis.String(object.ntfyPriority) : undefined,
            ntfyToken: isSet(object.ntfyToken) ? globalThis.String(object.ntfyToken) : undefined,
            ntfyUsername: isSet(object.ntfyUsername) ? globalThis.String(object.ntfyUsername) : undefined,
            ntfyPassword: isSet(object.ntfyPassword) ? globalThis.String(object.ntfyPassword) : undefined,
            ntfyActions: isSet(object.ntfyActions) ? globalThis.String(object.ntfyActions) : undefined,
            wxPusherBotAppToken: isSet(object.wxPusherBotAppToken)
                ? globalThis.String(object.wxPusherBotAppToken)
                : undefined,
            wxPusherBotTopicIds: isSet(object.wxPusherBotTopicIds)
                ? globalThis.String(object.wxPusherBotTopicIds)
                : undefined,
            wxPusherBotUids: isSet(object.wxPusherBotUids) ? globalThis.String(object.wxPusherBotUids) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== 0) {
            obj.type = notificationModeToJSON(message.type);
        }
        if (message.gotifyUrl !== undefined) {
            obj.gotifyUrl = message.gotifyUrl;
        }
        if (message.gotifyToken !== undefined) {
            obj.gotifyToken = message.gotifyToken;
        }
        if (message.gotifyPriority !== undefined) {
            obj.gotifyPriority = Math.round(message.gotifyPriority);
        }
        if (message.goCqHttpBotUrl !== undefined) {
            obj.goCqHttpBotUrl = message.goCqHttpBotUrl;
        }
        if (message.goCqHttpBotToken !== undefined) {
            obj.goCqHttpBotToken = message.goCqHttpBotToken;
        }
        if (message.goCqHttpBotQq !== undefined) {
            obj.goCqHttpBotQq = message.goCqHttpBotQq;
        }
        if (message.serverChanKey !== undefined) {
            obj.serverChanKey = message.serverChanKey;
        }
        if (message.pushDeerKey !== undefined) {
            obj.pushDeerKey = message.pushDeerKey;
        }
        if (message.pushDeerUrl !== undefined) {
            obj.pushDeerUrl = message.pushDeerUrl;
        }
        if (message.synologyChatUrl !== undefined) {
            obj.synologyChatUrl = message.synologyChatUrl;
        }
        if (message.barkPush !== undefined) {
            obj.barkPush = message.barkPush;
        }
        if (message.barkIcon !== undefined) {
            obj.barkIcon = message.barkIcon;
        }
        if (message.barkSound !== undefined) {
            obj.barkSound = message.barkSound;
        }
        if (message.barkGroup !== undefined) {
            obj.barkGroup = message.barkGroup;
        }
        if (message.barkLevel !== undefined) {
            obj.barkLevel = message.barkLevel;
        }
        if (message.barkUrl !== undefined) {
            obj.barkUrl = message.barkUrl;
        }
        if (message.barkArchive !== undefined) {
            obj.barkArchive = message.barkArchive;
        }
        if (message.telegramBotToken !== undefined) {
            obj.telegramBotToken = message.telegramBotToken;
        }
        if (message.telegramBotUserId !== undefined) {
            obj.telegramBotUserId = message.telegramBotUserId;
        }
        if (message.telegramBotProxyHost !== undefined) {
            obj.telegramBotProxyHost = message.telegramBotProxyHost;
        }
        if (message.telegramBotProxyPort !== undefined) {
            obj.telegramBotProxyPort = message.telegramBotProxyPort;
        }
        if (message.telegramBotProxyAuth !== undefined) {
            obj.telegramBotProxyAuth = message.telegramBotProxyAuth;
        }
        if (message.telegramBotApiHost !== undefined) {
            obj.telegramBotApiHost = message.telegramBotApiHost;
        }
        if (message.dingtalkBotToken !== undefined) {
            obj.dingtalkBotToken = message.dingtalkBotToken;
        }
        if (message.dingtalkBotSecret !== undefined) {
            obj.dingtalkBotSecret = message.dingtalkBotSecret;
        }
        if (message.weWorkBotKey !== undefined) {
            obj.weWorkBotKey = message.weWorkBotKey;
        }
        if (message.weWorkOrigin !== undefined) {
            obj.weWorkOrigin = message.weWorkOrigin;
        }
        if (message.weWorkAppKey !== undefined) {
            obj.weWorkAppKey = message.weWorkAppKey;
        }
        if (message.aibotkKey !== undefined) {
            obj.aibotkKey = message.aibotkKey;
        }
        if (message.aibotkType !== undefined) {
            obj.aibotkType = message.aibotkType;
        }
        if (message.aibotkName !== undefined) {
            obj.aibotkName = message.aibotkName;
        }
        if (message.iGotPushKey !== undefined) {
            obj.iGotPushKey = message.iGotPushKey;
        }
        if (message.pushPlusToken !== undefined) {
            obj.pushPlusToken = message.pushPlusToken;
        }
        if (message.pushPlusUser !== undefined) {
            obj.pushPlusUser = message.pushPlusUser;
        }
        if (message.pushPlusTemplate !== undefined) {
            obj.pushPlusTemplate = message.pushPlusTemplate;
        }
        if (message.pushplusChannel !== undefined) {
            obj.pushplusChannel = message.pushplusChannel;
        }
        if (message.pushplusWebhook !== undefined) {
            obj.pushplusWebhook = message.pushplusWebhook;
        }
        if (message.pushplusCallbackUrl !== undefined) {
            obj.pushplusCallbackUrl = message.pushplusCallbackUrl;
        }
        if (message.pushplusTo !== undefined) {
            obj.pushplusTo = message.pushplusTo;
        }
        if (message.wePlusBotToken !== undefined) {
            obj.wePlusBotToken = message.wePlusBotToken;
        }
        if (message.wePlusBotReceiver !== undefined) {
            obj.wePlusBotReceiver = message.wePlusBotReceiver;
        }
        if (message.wePlusBotVersion !== undefined) {
            obj.wePlusBotVersion = message.wePlusBotVersion;
        }
        if (message.emailService !== undefined) {
            obj.emailService = message.emailService;
        }
        if (message.emailUser !== undefined) {
            obj.emailUser = message.emailUser;
        }
        if (message.emailPass !== undefined) {
            obj.emailPass = message.emailPass;
        }
        if (message.emailTo !== undefined) {
            obj.emailTo = message.emailTo;
        }
        if (message.pushMeKey !== undefined) {
            obj.pushMeKey = message.pushMeKey;
        }
        if (message.pushMeUrl !== undefined) {
            obj.pushMeUrl = message.pushMeUrl;
        }
        if (message.chronocatURL !== undefined) {
            obj.chronocatURL = message.chronocatURL;
        }
        if (message.chronocatQQ !== undefined) {
            obj.chronocatQQ = message.chronocatQQ;
        }
        if (message.chronocatToken !== undefined) {
            obj.chronocatToken = message.chronocatToken;
        }
        if (message.webhookHeaders !== undefined) {
            obj.webhookHeaders = message.webhookHeaders;
        }
        if (message.webhookBody !== undefined) {
            obj.webhookBody = message.webhookBody;
        }
        if (message.webhookUrl !== undefined) {
            obj.webhookUrl = message.webhookUrl;
        }
        if (message.webhookMethod !== undefined) {
            obj.webhookMethod = message.webhookMethod;
        }
        if (message.webhookContentType !== undefined) {
            obj.webhookContentType = message.webhookContentType;
        }
        if (message.larkKey !== undefined) {
            obj.larkKey = message.larkKey;
        }
        if (message.ntfyUrl !== undefined) {
            obj.ntfyUrl = message.ntfyUrl;
        }
        if (message.ntfyTopic !== undefined) {
            obj.ntfyTopic = message.ntfyTopic;
        }
        if (message.ntfyPriority !== undefined) {
            obj.ntfyPriority = message.ntfyPriority;
        }
        if (message.ntfyToken !== undefined) {
            obj.ntfyToken = message.ntfyToken;
        }
        if (message.ntfyUsername !== undefined) {
            obj.ntfyUsername = message.ntfyUsername;
        }
        if (message.ntfyPassword !== undefined) {
            obj.ntfyPassword = message.ntfyPassword;
        }
        if (message.ntfyActions !== undefined) {
            obj.ntfyActions = message.ntfyActions;
        }
        if (message.wxPusherBotAppToken !== undefined) {
            obj.wxPusherBotAppToken = message.wxPusherBotAppToken;
        }
        if (message.wxPusherBotTopicIds !== undefined) {
            obj.wxPusherBotTopicIds = message.wxPusherBotTopicIds;
        }
        if (message.wxPusherBotUids !== undefined) {
            obj.wxPusherBotUids = message.wxPusherBotUids;
        }
        return obj;
    },
    create(base) {
        return exports.NotificationInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43;
        const message = createBaseNotificationInfo();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;
        message.gotifyUrl = (_b = object.gotifyUrl) !== null && _b !== void 0 ? _b : undefined;
        message.gotifyToken = (_c = object.gotifyToken) !== null && _c !== void 0 ? _c : undefined;
        message.gotifyPriority = (_d = object.gotifyPriority) !== null && _d !== void 0 ? _d : undefined;
        message.goCqHttpBotUrl = (_e = object.goCqHttpBotUrl) !== null && _e !== void 0 ? _e : undefined;
        message.goCqHttpBotToken = (_f = object.goCqHttpBotToken) !== null && _f !== void 0 ? _f : undefined;
        message.goCqHttpBotQq = (_g = object.goCqHttpBotQq) !== null && _g !== void 0 ? _g : undefined;
        message.serverChanKey = (_h = object.serverChanKey) !== null && _h !== void 0 ? _h : undefined;
        message.pushDeerKey = (_j = object.pushDeerKey) !== null && _j !== void 0 ? _j : undefined;
        message.pushDeerUrl = (_k = object.pushDeerUrl) !== null && _k !== void 0 ? _k : undefined;
        message.synologyChatUrl = (_l = object.synologyChatUrl) !== null && _l !== void 0 ? _l : undefined;
        message.barkPush = (_m = object.barkPush) !== null && _m !== void 0 ? _m : undefined;
        message.barkIcon = (_o = object.barkIcon) !== null && _o !== void 0 ? _o : undefined;
        message.barkSound = (_p = object.barkSound) !== null && _p !== void 0 ? _p : undefined;
        message.barkGroup = (_q = object.barkGroup) !== null && _q !== void 0 ? _q : undefined;
        message.barkLevel = (_r = object.barkLevel) !== null && _r !== void 0 ? _r : undefined;
        message.barkUrl = (_s = object.barkUrl) !== null && _s !== void 0 ? _s : undefined;
        message.barkArchive = (_t = object.barkArchive) !== null && _t !== void 0 ? _t : undefined;
        message.telegramBotToken = (_u = object.telegramBotToken) !== null && _u !== void 0 ? _u : undefined;
        message.telegramBotUserId = (_v = object.telegramBotUserId) !== null && _v !== void 0 ? _v : undefined;
        message.telegramBotProxyHost = (_w = object.telegramBotProxyHost) !== null && _w !== void 0 ? _w : undefined;
        message.telegramBotProxyPort = (_x = object.telegramBotProxyPort) !== null && _x !== void 0 ? _x : undefined;
        message.telegramBotProxyAuth = (_y = object.telegramBotProxyAuth) !== null && _y !== void 0 ? _y : undefined;
        message.telegramBotApiHost = (_z = object.telegramBotApiHost) !== null && _z !== void 0 ? _z : undefined;
        message.dingtalkBotToken = (_0 = object.dingtalkBotToken) !== null && _0 !== void 0 ? _0 : undefined;
        message.dingtalkBotSecret = (_1 = object.dingtalkBotSecret) !== null && _1 !== void 0 ? _1 : undefined;
        message.weWorkBotKey = (_2 = object.weWorkBotKey) !== null && _2 !== void 0 ? _2 : undefined;
        message.weWorkOrigin = (_3 = object.weWorkOrigin) !== null && _3 !== void 0 ? _3 : undefined;
        message.weWorkAppKey = (_4 = object.weWorkAppKey) !== null && _4 !== void 0 ? _4 : undefined;
        message.aibotkKey = (_5 = object.aibotkKey) !== null && _5 !== void 0 ? _5 : undefined;
        message.aibotkType = (_6 = object.aibotkType) !== null && _6 !== void 0 ? _6 : undefined;
        message.aibotkName = (_7 = object.aibotkName) !== null && _7 !== void 0 ? _7 : undefined;
        message.iGotPushKey = (_8 = object.iGotPushKey) !== null && _8 !== void 0 ? _8 : undefined;
        message.pushPlusToken = (_9 = object.pushPlusToken) !== null && _9 !== void 0 ? _9 : undefined;
        message.pushPlusUser = (_10 = object.pushPlusUser) !== null && _10 !== void 0 ? _10 : undefined;
        message.pushPlusTemplate = (_11 = object.pushPlusTemplate) !== null && _11 !== void 0 ? _11 : undefined;
        message.pushplusChannel = (_12 = object.pushplusChannel) !== null && _12 !== void 0 ? _12 : undefined;
        message.pushplusWebhook = (_13 = object.pushplusWebhook) !== null && _13 !== void 0 ? _13 : undefined;
        message.pushplusCallbackUrl = (_14 = object.pushplusCallbackUrl) !== null && _14 !== void 0 ? _14 : undefined;
        message.pushplusTo = (_15 = object.pushplusTo) !== null && _15 !== void 0 ? _15 : undefined;
        message.wePlusBotToken = (_16 = object.wePlusBotToken) !== null && _16 !== void 0 ? _16 : undefined;
        message.wePlusBotReceiver = (_17 = object.wePlusBotReceiver) !== null && _17 !== void 0 ? _17 : undefined;
        message.wePlusBotVersion = (_18 = object.wePlusBotVersion) !== null && _18 !== void 0 ? _18 : undefined;
        message.emailService = (_19 = object.emailService) !== null && _19 !== void 0 ? _19 : undefined;
        message.emailUser = (_20 = object.emailUser) !== null && _20 !== void 0 ? _20 : undefined;
        message.emailPass = (_21 = object.emailPass) !== null && _21 !== void 0 ? _21 : undefined;
        message.emailTo = (_22 = object.emailTo) !== null && _22 !== void 0 ? _22 : undefined;
        message.pushMeKey = (_23 = object.pushMeKey) !== null && _23 !== void 0 ? _23 : undefined;
        message.pushMeUrl = (_24 = object.pushMeUrl) !== null && _24 !== void 0 ? _24 : undefined;
        message.chronocatURL = (_25 = object.chronocatURL) !== null && _25 !== void 0 ? _25 : undefined;
        message.chronocatQQ = (_26 = object.chronocatQQ) !== null && _26 !== void 0 ? _26 : undefined;
        message.chronocatToken = (_27 = object.chronocatToken) !== null && _27 !== void 0 ? _27 : undefined;
        message.webhookHeaders = (_28 = object.webhookHeaders) !== null && _28 !== void 0 ? _28 : undefined;
        message.webhookBody = (_29 = object.webhookBody) !== null && _29 !== void 0 ? _29 : undefined;
        message.webhookUrl = (_30 = object.webhookUrl) !== null && _30 !== void 0 ? _30 : undefined;
        message.webhookMethod = (_31 = object.webhookMethod) !== null && _31 !== void 0 ? _31 : undefined;
        message.webhookContentType = (_32 = object.webhookContentType) !== null && _32 !== void 0 ? _32 : undefined;
        message.larkKey = (_33 = object.larkKey) !== null && _33 !== void 0 ? _33 : undefined;
        message.ntfyUrl = (_34 = object.ntfyUrl) !== null && _34 !== void 0 ? _34 : undefined;
        message.ntfyTopic = (_35 = object.ntfyTopic) !== null && _35 !== void 0 ? _35 : undefined;
        message.ntfyPriority = (_36 = object.ntfyPriority) !== null && _36 !== void 0 ? _36 : undefined;
        message.ntfyToken = (_37 = object.ntfyToken) !== null && _37 !== void 0 ? _37 : undefined;
        message.ntfyUsername = (_38 = object.ntfyUsername) !== null && _38 !== void 0 ? _38 : undefined;
        message.ntfyPassword = (_39 = object.ntfyPassword) !== null && _39 !== void 0 ? _39 : undefined;
        message.ntfyActions = (_40 = object.ntfyActions) !== null && _40 !== void 0 ? _40 : undefined;
        message.wxPusherBotAppToken = (_41 = object.wxPusherBotAppToken) !== null && _41 !== void 0 ? _41 : undefined;
        message.wxPusherBotTopicIds = (_42 = object.wxPusherBotTopicIds) !== null && _42 !== void 0 ? _42 : undefined;
        message.wxPusherBotUids = (_43 = object.wxPusherBotUids) !== null && _43 !== void 0 ? _43 : undefined;
        return message;
    },
};
function createBaseSystemNotifyRequest() {
    return { title: "", content: "", notificationInfo: undefined };
}
exports.SystemNotifyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.content !== "") {
            writer.uint32(18).string(message.content);
        }
        if (message.notificationInfo !== undefined) {
            exports.NotificationInfo.encode(message.notificationInfo, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSystemNotifyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.notificationInfo = exports.NotificationInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            notificationInfo: isSet(object.notificationInfo) ? exports.NotificationInfo.fromJSON(object.notificationInfo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        if (message.notificationInfo !== undefined) {
            obj.notificationInfo = exports.NotificationInfo.toJSON(message.notificationInfo);
        }
        return obj;
    },
    create(base) {
        return exports.SystemNotifyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSystemNotifyRequest();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.content = (_b = object.content) !== null && _b !== void 0 ? _b : "";
        message.notificationInfo = (object.notificationInfo !== undefined && object.notificationInfo !== null)
            ? exports.NotificationInfo.fromPartial(object.notificationInfo)
            : undefined;
        return message;
    },
};
exports.ApiService = {
    getEnvs: {
        path: "/com.ql.api.Api/GetEnvs",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.GetEnvsRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.GetEnvsRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.EnvsResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.EnvsResponse.decode(value),
    },
    createEnv: {
        path: "/com.ql.api.Api/CreateEnv",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.CreateEnvRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.CreateEnvRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.EnvsResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.EnvsResponse.decode(value),
    },
    updateEnv: {
        path: "/com.ql.api.Api/UpdateEnv",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.UpdateEnvRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.UpdateEnvRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.EnvResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.EnvResponse.decode(value),
    },
    deleteEnvs: {
        path: "/com.ql.api.Api/DeleteEnvs",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.DeleteEnvsRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.DeleteEnvsRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.Response.encode(value).finish()),
        responseDeserialize: (value) => exports.Response.decode(value),
    },
    moveEnv: {
        path: "/com.ql.api.Api/MoveEnv",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.MoveEnvRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.MoveEnvRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.EnvResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.EnvResponse.decode(value),
    },
    disableEnvs: {
        path: "/com.ql.api.Api/DisableEnvs",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.DisableEnvsRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.DisableEnvsRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.Response.encode(value).finish()),
        responseDeserialize: (value) => exports.Response.decode(value),
    },
    enableEnvs: {
        path: "/com.ql.api.Api/EnableEnvs",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.EnableEnvsRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.EnableEnvsRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.Response.encode(value).finish()),
        responseDeserialize: (value) => exports.Response.decode(value),
    },
    updateEnvNames: {
        path: "/com.ql.api.Api/UpdateEnvNames",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.UpdateEnvNamesRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.UpdateEnvNamesRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.Response.encode(value).finish()),
        responseDeserialize: (value) => exports.Response.decode(value),
    },
    getEnvById: {
        path: "/com.ql.api.Api/GetEnvById",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.GetEnvByIdRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.GetEnvByIdRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.EnvResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.EnvResponse.decode(value),
    },
    systemNotify: {
        path: "/com.ql.api.Api/SystemNotify",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.SystemNotifyRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.SystemNotifyRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.Response.encode(value).finish()),
        responseDeserialize: (value) => exports.Response.decode(value),
    },
    getCronDetail: {
        path: "/com.ql.api.Api/GetCronDetail",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.CronDetailRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.CronDetailRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.CronDetailResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.CronDetailResponse.decode(value),
    },
    createCron: {
        path: "/com.ql.api.Api/CreateCron",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.CreateCronRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.CreateCronRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.CronResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.CronResponse.decode(value),
    },
    updateCron: {
        path: "/com.ql.api.Api/UpdateCron",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.UpdateCronRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.UpdateCronRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.CronResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.CronResponse.decode(value),
    },
    deleteCrons: {
        path: "/com.ql.api.Api/DeleteCrons",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.DeleteCronsRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.DeleteCronsRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.Response.encode(value).finish()),
        responseDeserialize: (value) => exports.Response.decode(value),
    },
};
exports.ApiClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.ApiService, "com.ql.api.Api");
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=api.js.map